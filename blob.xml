<!DOCTYPE chapter>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="udr-blob" xml:lang="ru">
  <info>
    <title>Работа с типом BLOB</title>
  </info>

  <para>В отличие от других типов данных BLOB передаются по ссылке (идентификатор BLOB), а не по
    значению. Это логично, BLOB могут быть огромных размеров, а потому поместить их в буфер
    фиксированный ширины невозможно. Вместо этого в буфер сообщений помещается так называемый BLOB
    идентификатор. а работа с данными типа BLOB осуществляются через интерфейс
      <interfacename>IBlob</interfacename>. </para>
  <para>Ещё одной важной особенностью типа BLOB является то, что BLOB является не изменяемым типом,
    вы не можете изменить содержимое BLOB с заданным идентификатором, вместо этого нужно создать
    BLOB с новым содержимым и идентификатором.</para>

  <para>Поскольку размер данных типа BLOB может быть очень большим, то данные BLOB читаются и
    пишутся порциями (сегментами), максимальный размер сегмента равен 64 Кб. Чтение сегмента
    осуществляется методом <methodname>getSegment</methodname> интерфейса
      <interfacename>IBlob</interfacename>. Запись сегмента осуществляется методом
      <methodname>putSegment</methodname> интерфейса <interfacename>IBlob</interfacename>.</para>

  <section xml:id="udr-blob-read">
    <info>
      <title>Чтение данных из BLOB</title>
    </info>

    <para>В качестве примера чтения BLOB рассмотрим процедуру которая разбивает строку по
      разделителю (обратная процедура для встроенной агрегатной функции LIST). Она объявлена
      следующим образом <programlisting language="sql">
<![CDATA[ 
create procedure split (
    txt blob sub_type text character set utf8,
    delimiter char(1) character set utf8 = ','
) returns (
    id integer
)
external name 'myudr!split'
engine udr;
]]>
            </programlisting>
    </para>

    <para>Зарегистрируем фабрику нашей процедуры: <programlisting language="delphi">
<![CDATA[ 
function firebird_udr_plugin(AStatus: IStatus; AUnloadFlagLocal: BooleanPtr;
  AUdrPlugin: IUdrPlugin): BooleanPtr; cdecl;
begin
  // регистрируем нашу процедуру
  AUdrPlugin.registerProcedure(AStatus, 'split', TProcedureSimpleFactory<TSplitProcedure>.Create());

  theirUnloadFlag := AUnloadFlagLocal;
  Result := @myUnloadFlag;
end;
]]>
            </programlisting>
    </para>

    <para>Здесь я применил обобщённую фабрику процедур для простых случаев, когда фабрика просто
      создаёт экземпляр процедуры без использования метаданных. Такая фабрика объявлена следующим
      образом: <programlisting language="delphi">
<![CDATA[ 
...
interface

uses SysUtils, Firebird;

type

  TProcedureSimpleFactory<T: IExternalProcedureImpl, constructor> =
  class(IUdrProcedureFactoryImpl)
    procedure dispose(); override;

    procedure setup(AStatus: IStatus; AContext: IExternalContext;
      AMetadata: IRoutineMetadata; AInBuilder: IMetadataBuilder;
      AOutBuilder: IMetadataBuilder); override;

    function newItem(AStatus: IStatus; AContext: IExternalContext;
      AMetadata: IRoutineMetadata): IExternalProcedure; override;
  end;
  
...

implementation

{ TProcedureSimpleFactory<T> }

procedure TProcedureSimpleFactory<T>.dispose;
begin
  Destroy;
end;

function TProcedureSimpleFactory<T>.newItem(AStatus: IStatus;
  AContext: IExternalContext; AMetadata: IRoutineMetadata): IExternalProcedure;
begin
  Result := T.Create;
end;

procedure TProcedureSimpleFactory<T>.setup(AStatus: IStatus;
  AContext: IExternalContext; AMetadata: IRoutineMetadata; AInBuilder,
  AOutBuilder: IMetadataBuilder);
begin

...
]]>
            </programlisting>
    </para>

    <para>Теперь перейдём к реализации процедуры. Сначала объявим структуры для входного и выходного
      сообщения. <programlisting language="delphi">
<![CDATA[  
  TInput = record
    txt: ISC_QUAD;
    txtNull: WordBool;
    delimiter: array [0 .. 3] of AnsiChar;
    delimiterNull: WordBool;
  end;

  TInputPtr = ^TInput;

  TOutput = record
    Id: Integer;
    Null: WordBool;
  end;

  TOutputPtr = ^TOutput;
]]>
                </programlisting>
    </para>

    <para>Как видите вместо значения BLOB передаётся идентификатор BLOB, который описывается
      структурой ISC_QUAD.</para>

    <para>Теперь опишем класс процедуры и возвращаемого набора данных: <programlisting language="delphi">
<![CDATA[  
  TSplitProcedure = class(IExternalProcedureImpl)
  private
    procedure SaveBlobToStream(AStatus: IStatus; AContext: IExternalContext;
      ABlobId: ISC_QUADPtr; AStream: TStream);
    function readBlob(AStatus: IStatus; AContext: IExternalContext;
      ABlobId: ISC_QUADPtr): string;
  public
    // Вызывается при уничтожении экземпляра процедуры
    procedure dispose(); override;

    procedure getCharSet(AStatus: IStatus; AContext: IExternalContext;
      AName: PAnsiChar; ANameSize: Cardinal); override;

    function open(AStatus: IStatus; AContext: IExternalContext; AInMsg: Pointer;
      AOutMsg: Pointer): IExternalResultSet; override;
  end;

  TSplitResultSet = class(IExternalResultSetImpl)
{$IFDEF FPC}
    OutputArray: TStringArray;
{$ELSE}
    OutputArray: TArray<string>;
{$ENDIF}
    Counter: Integer;
    Output: TOutputPtr;

    procedure dispose(); override;
    function fetch(AStatus: IStatus): Boolean; override;
  end;
]]>
                </programlisting>
    </para>

    <para>Дополнительные методы <methodname>SaveBlobToStream</methodname> и
        <methodname>readBlob</methodname> предназначены для чтения BLOB. Первая читает BLOB в поток,
      вторая — основана на первой и выполняет преобразование прочтённого потока в строку Delphi. В
      набор данных передаётся массив строк OutputArray и счётчик возвращённых записей
      Counter.</para>

    <para>В методе open читается BLOB и преобразуется в строку. Полученная строка разбивается по
      разделителю с помощью встроенного метода Split из хелпера для строк. Полученный массив строк
      передаётся в результирующий набор данных. <programlisting language="delphi">
<![CDATA[  
function TSplitProcedure.open(AStatus: IStatus; AContext: IExternalContext;
  AInMsg, AOutMsg: Pointer): IExternalResultSet;
var
  xInput: TInputPtr;
  xText: string;
  xDelimiter: string;
begin
  xInput := AInMsg;
  if xInput.txtNull or xInput.delimiterNull then
  begin
    Result := nil;
    Exit;
  end;

  xText := readBlob(AStatus, AContext, @xInput.txt);
  xDelimiter := TFBCharSet.CS_UTF8.GetString(TBytes(@xInput.delimiter), 0, 4);
  // автоматически не правильно определяется потому что строки
  // не завершены нулём
  // ставим кол-во байт/4
  SetLength(xDelimiter, 1);

  Result := TSplitResultSet.Create;
  with TSplitResultSet(Result) do
  begin
    Output := AOutMsg;
    OutputArray := xText.Split([xDelimiter], TStringSplitOptions.ExcludeEmpty);
    Counter := 0;
  end;
end;
]]>
                </programlisting>
    </para>

    <note>
      <para>Тип перечисление TFBCharSet не входит в Firebird.pas. Он написан мною для облегчения
        работы с кодировками Firebird. В данном случае считаем что все наши строки приходят в
        кодировке UTF-8.</para>
    </note>

    <para>Теперь опишем процедуру чтения данных из BLOB в поток. Для того чтобы прочитать данные из
      BLOB необходимо его открыть. Это можно сделать вызвав метод <methodname>openBlob</methodname>
      интерфейса <interfacename>IAttachment</interfacename>. Поскольку мы читаем BLOB из своей базы
      данных, то будем открывать его в контексте текущего подключения. Контекст текущего подключения
      и контекст текущей транзакции мы можем получить из контекста внешней процедуры, функции или
      триггера (интерфейс <interfacename>IExternalContext</interfacename>).</para>

    <para>BLOB читается порциями (сегментами), максимальный размер сегмента равен 64 Кб. Чтение
      сегмента осуществляется методом <methodname>getSegment</methodname> интерфейса
        <interfacename>IBlob</interfacename>.</para>

    <para><programlisting language="delphi">
<![CDATA[  
procedure TSplitProcedure.SaveBlobToStream(AStatus: IStatus;
  AContext: IExternalContext; ABlobId: ISC_QUADPtr; AStream: TStream);
var
  att: IAttachment;
  trx: ITransaction;
  blob: IBlob;
  buffer: array [0 .. 32767] of AnsiChar;
  l: Integer;
begin
  try
    att := AContext.getAttachment(AStatus);
    trx := AContext.getTransaction(AStatus);
    blob := att.openBlob(AStatus, trx, ABlobId, 0, nil);
    while True do
    begin
      case blob.getSegment(AStatus, SizeOf(buffer), @buffer, @l) of
        IStatus.RESULT_OK:
          AStream.WriteBuffer(buffer, l);
        IStatus.RESULT_SEGMENT:
          AStream.WriteBuffer(buffer, l);
      else
        break;
      end;
    end;
    AStream.Position := 0;
    blob.close(AStatus);
	blob := nil;
  finally
    if Assigned(att) then
      att.release;
    if Assigned(trx) then
      trx.release;
    if Assigned(blob) then
      blob.release;
  end;
end;
]]>
                </programlisting>
    </para>

    <note>
      <para>Обратите внимание, интерфейсы <interfacename>IAttachment</interfacename>,
          <interfacename>ITransaction</interfacename> и <interfacename>IBlob</interfacename>
        наследуют интерфейс <interfacename>IReferenceCounted</interfacename>, а значит это объекты с
        подсчётом ссылок. Методы возвращающие объекты этих интерфейсов устанавливают счётчик ссылок
        в 1. По завершению работы с такими объектами нужно уменьшить счётчик ссылок с помощью метода
          <methodname>release</methodname>.</para>
    </note>

    <para>На основе метода <methodname>SaveBlobToStream</methodname> написана процедура чтения BLOB
      в строку: <programlisting language="delphi">            
<![CDATA[  
function TSplitProcedure.readBlob(AStatus: IStatus; AContext: IExternalContext;
  ABlobId: ISC_QUADPtr): string;
var
{$IFDEF FPC}
  xStream: TBytesStream;
{$ELSE}
  xStream: TStringStream;
{$ENDIF}
begin
{$IFDEF FPC}
  xStream := TBytesStream.Create(nil);
{$ELSE}
  xStream := TStringStream.Create('', 65001);
{$ENDIF}
  try
    SaveBlobToStream(AStatus, AContext, ABlobId, xStream);
{$IFDEF FPC}
    Result := TEncoding.UTF8.GetString(xStream.Bytes, 0, xStream.Size);
{$ELSE}
    Result := xStream.DataString;
{$ENDIF}
  finally
    xStream.Free;
  end;
end;
]]>
</programlisting>
    </para>

    <note>
      <para>К сожалению Free Pascal не обеспечивает полную обратную совместимость с Delphi для
        класса <classname>TStringStream</classname>. В версии для FPC нельзя указать кодировку с
        которой будет работать поток, а потому приходится обрабатывать для него преобразование в
        строку особым образом.</para>
    </note>

    <para>Метод <methodname>fetch</methodname> выходного набора данных извлекает из массива строк
      элемент с индексом Counter и увеличивает его до тех пор, пока не будет извлечён последний
      элемент массива. Каждая извлечённая строка преобразуется к целому. Если это невозможно сделать
      то будет возбуждено исключение с кодом <literal>isc_convert_error</literal>. <programlisting language="delphi">            
<![CDATA[  
procedure TSplitResultSet.dispose;
begin
  SetLength(OutputArray, 0);
  Destroy;
end;

function TSplitResultSet.fetch(AStatus: IStatus): Boolean;
var
  statusVector: array [0 .. 4] of NativeIntPtr;
begin
  if Counter <= High(OutputArray) then
  begin
    Output.Null := False;
    // исключение будут перехвачены в любом случае с кодом isc_random
    // здесь же мы будем выбрасывать стандартную для Firebird
    // ошибку isc_convert_error
    try
      Output.Id := OutputArray[Counter].ToInteger();
    except
      on e: EConvertError do
      begin

        statusVector[0] := NativeIntPtr(isc_arg_gds);
        statusVector[1] := NativeIntPtr(isc_convert_error);
        statusVector[2] := NativeIntPtr(isc_arg_string);
        statusVector[3] := NativeIntPtr(PAnsiChar('Cannot convert string to integer'));
        statusVector[4] := NativeIntPtr(isc_arg_end);

        AStatus.setErrors(@statusVector);
      end;
    end;
    inc(Counter);
    Result := True;
  end
  else
    Result := False;
end;
]]>
</programlisting>
    </para>

    <note>
      <para>На самом деле обработка любых ошибок кроме isc_random не очень удобна, для упрощения
        можно написать свою обёртку.</para>
    </note>

    <para>Работоспособность процедуры можно проверить следующим образом: <programlisting language="sql">            
<![CDATA[  
SELECT ids.ID
FROM SPLIT((SELECT LIST(ID) FROM MYTABLE), ',') ids
]]>
</programlisting>
    </para>

    <note>
      <para>Главным недостатком такой реализации состоит в том, что BLOB будет всегда прочитан
        целиком, даже если вы хотите досрочно прервать извлечение записей из процедуры. При желании
        вы можете изменить код процедуры таким образом, чтобы разбиение на подстроки осуществлялось
        более маленькими порциями. Для этого чтение этих порций необходимо осуществлять в методе
          <methodname>fetch</methodname> по мере извлечения строк результата.</para>
    </note>
  </section>

  <section xml:id="udr-blob_write">
    <info>
      <title>Запись данных в BLOB</title>
    </info>

    <para>В качестве примера записи BLOB рассмотрим функцию читающую содержимое BLOB из
      файла.</para>

    <note>
      <para>Этот пример является адаптированной версией UDF функций для чтения и записи BLOB из/в
        файл. Оригинальная UDF доступна по адресу <link xmlns:xlink="http://www.w3.org/1999/xlink"
          xlink:href="http://www.ibase.ru/files/download/blobsaveload.zip"
        >blobsaveload.zip</link></para>
    </note>

    <para>Утилиты для чтения и записи BLOB из/в файл оформлены в виде пакета <programlisting language="sql">
<![CDATA[ 
CREATE PACKAGE BlobFileUtils
AS
BEGIN
  PROCEDURE SaveBlobToFile(ABlob BLOB, AFileName VARCHAR(255) CHARACTER SET UTF8);

  FUNCTION LoadBlobFromFile(AFileName VARCHAR(255) CHARACTER SET UTF8) RETURNS BLOB;
END^

CREATE PACKAGE BODY BlobFileUtils
AS
BEGIN
  PROCEDURE SaveBlobToFile(ABlob BLOB, AFileName VARCHAR(255) CHARACTER SET UTF8)
  EXTERNAL NAME 'BlobFileUtils!SaveBlobToFile'
  ENGINE UDR;

  FUNCTION LoadBlobFromFile(AFileName VARCHAR(255) CHARACTER SET UTF8) RETURNS BLOB
  EXTERNAL NAME 'BlobFileUtils!LoadBlobFromFile'
  ENGINE UDR;
END^
]]>
            </programlisting>
    </para>
    <para>Зарегистрируем фабрики наших процедур и функций: <programlisting language="delphi">
<![CDATA[ 
function firebird_udr_plugin(AStatus: IStatus; AUnloadFlagLocal: BooleanPtr;
  AUdrPlugin: IUdrPlugin): BooleanPtr; cdecl;
begin
  // регистрируем
  AUdrPlugin.registerProcedure(AStatus, 'SaveBlobToFile', TSaveBlobToFileProcFactory.Create());
  AUdrPlugin.registerFunction(AStatus, 'LoadBlobFromFile', TLoadBlobFromFileFuncFactory.Create());

  theirUnloadFlag := AUnloadFlagLocal;
  Result := @myUnloadFlag;
end;
]]>
            </programlisting>
    </para>
    <para>В данном случае приведём пример только для функции считывающий BLOB из файла, полный
      пример UDR вы можете скачать по адресу <link xmlns:xlink="http://www.w3.org/1999/xlink"
        xlink:href="https://github.com/sim1984/udr-book/tree/master/examples/06.%20BlobSaveLoad"
        >06.BlobSaveLoad</link>. Интерфейсная часть модуля с описанием функции LoadBlobFromFile
      выглядит следующим образом: <programlisting language="delphi">
<![CDATA[ 
interface

uses
  Firebird, Classes, SysUtils;

type

  // входное сообщений функции
  TInput = record
    filename: record
      len: Smallint;
      str: array [0 .. 1019] of AnsiChar;
    end;
    filenameNull: WordBool;
  end;
  TInputPtr = ^TInput;
  
  // выходное сообщение функции
  TOutput = record
    blobData: ISC_QUAD;
    blobDataNull: WordBool;
  end;
  TOutputPtr = ^TOutput;

  // реализация функции LoadBlobFromFile
  TLoadBlobFromFileFunc = class(IExternalFunctionImpl)
  public
    procedure dispose(); override;

    procedure getCharSet(AStatus: IStatus; AContext: IExternalContext;
      AName: PAnsiChar; ANameSize: Cardinal); override;

    procedure execute(AStatus: IStatus; AContext: IExternalContext;
      AInMsg: Pointer; AOutMsg: Pointer); override;
  end;

  // Фабрика для создания экземпляра внешней функции LoadBlobFromFile
  TLoadBlobFromFileFuncFactory = class(IUdrFunctionFactoryImpl)
    procedure dispose(); override;

    procedure setup(AStatus: IStatus; AContext: IExternalContext;
      AMetadata: IRoutineMetadata; AInBuilder: IMetadataBuilder;
      AOutBuilder: IMetadataBuilder); override;

    function newItem(AStatus: IStatus; AContext: IExternalContext;
      AMetadata: IRoutineMetadata): IExternalFunction; override;
  end;
]]>
            </programlisting>
    </para>
    <para>Приведём только реализацию основного метода <methodname>execute</methodname> класса
        <classname>TLoadBlobFromFile</classname>, остальные методы классов элементарны. <programlisting language="delphi">
<![CDATA[ 
procedure TLoadBlobFromFileFunc.execute(AStatus: IStatus;
  AContext: IExternalContext; AInMsg: Pointer; AOutMsg: Pointer);
const
  MaxBufSize = 16384;
var
  xInput: TInputPtr;
  xOutput: TOutputPtr;
  xFileName: string;
  xStream: TFileStream;
  att: IAttachment;
  trx: ITransaction;
  blob: IBlob;
  buffer: array [0 .. 32767] of Byte;
  xStreamSize: Integer;
  xBufferSize: Integer;
  xReadLength: Integer;
begin
  xInput := AInMsg;
  xOutput := AOutMsg;
  if xInput.filenameNull then
  begin
    xOutput.blobDataNull := True;
    Exit;
  end;
  xOutput.blobDataNull := False;
  // получаем имя файла
  xFileName := TEncoding.UTF8.GetString(TBytes(@xInput.filename.str), 0,
    xInput.filename.len * 4);
  SetLength(xFileName, xInput.filename.len);
  // читаем файл в поток
  xStream := TFileStream.Create(xFileName, fmOpenRead or fmShareDenyNone);
  att := AContext.getAttachment(AStatus);
  trx := AContext.getTransaction(AStatus);
  blob := nil;
  try
    xStreamSize := xStream.Size;
    // определём максимальный размер буфера (сегмента)
    if xStreamSize > MaxBufSize then
      xBufferSize := MaxBufSize
    else
      xBufferSize := xStreamSize;
    // создаём новый blob  
    blob := att.createBlob(AStatus, trx, @xOutput.blobData, 0, nil);
    // читаем содержимое потока и пишем его в BLOB по сегментно
    while xStreamSize <> 0 do
    begin
      if xStreamSize > xBufferSize then
        xReadLength := xBufferSize
      else
        xReadLength := xStreamSize;
      xStream.ReadBuffer(buffer, xReadLength);

      blob.putSegment(AStatus, xReadLength, @buffer[0]);

      Dec(xStreamSize, xReadLength);
    end;
    // закрываем BLOB
    blob.close(AStatus);
	blob := nil;
  finally
    if Assigned(blob) then
      blob.release;
    att.release;
    trx.release;
    xStream.Free;
  end;
end;
]]>
            </programlisting>
    </para>
    <para>Первым делом необходимо создать новый BLOB и привязать его в blobId выхода с помощью
      метода <methodname>createBlob</methodname> интерфейса
        <interfacename>IAttachment</interfacename>. Поскольку мы пишем пусть и временный BLOB для
      своей базы данных, то будем создавать его в контексте текущего подключения. Контекст текущего
      подключения и контекст текущей транзакции мы можем получить из контекста внешней процедуры,
      функции или триггера (интерфейс <interfacename>IExternalContext</interfacename>). </para>
    <para>Так же как и в случае с чтением данных из BLOB, запись ведётся по сегментно с помощью
      метода <methodname>putSegment</methodname> интерфейса <interfacename>IBlob</interfacename> до
      тех пор, пока данные в потоке файла не закончатся. По завершению записи данных в блоб
      необходимо закрыть его с помощью метода <methodname>close</methodname>.</para>

  </section>

  <section xml:id="udr-blob-helper">
    <info>
      <title>Хелпер для работы с типом BLOB</title>
    </info>

    <para>В выше описанных примерах мы использовали сохранение содержимого BLOB в поток, а также
      загрузку содержимого BLOB в поток. Это довольно частая операция при работе с типом BLOB,
      поэтому было бы хорошо написать специальный набор утилит для повторного использования
      кода.</para>

    <para>Современные версии Delphi и Free Pascal позволяют расширять существующие классы и типы без
      наследования с помощью так называемых хэлперов. Добавим методы в интерфейс
        <interfacename>IBlob</interfacename> для сохранения и загрузки содержимого потока из/в
      Blob.</para>

    <para>Создадим специальный модуль FbBlob, где будет размещён наш хэлпер. <programlisting language="delphi">
<![CDATA[
unit FbBlob;

interface

uses Classes, SysUtils, Firebird;

const
  MAX_SEGMENT_SIZE = $7FFF;

type
  TFbBlobHelper = class helper for IBlob
    { Загружает в BLOB содержимое потока

      @param(AStatus Статус вектор)
      @param(AStream Поток)
    }
    procedure LoadFromStream(AStatus: IStatus; AStream: TStream);
    { Загружает в поток содержимое BLOB

      @param(AStatus Статус вектор)
      @param(AStream Поток)
    }
    procedure SaveToStream(AStatus: IStatus; AStream: TStream);
  end;
  
implementation

uses Math;

procedure TFbBlobHelper.LoadFromStream(AStatus: IStatus; AStream: TStream);
var
  xStreamSize: Integer;
  xReadLength: Integer;
  xBuffer: array [0 .. MAX_SEGMENT_SIZE] of Byte;
begin
  xStreamSize := AStream.Size;
  AStream.Position := 0;
  while xStreamSize <> 0 do
  begin
    xReadLength := Min(xStreamSize, MAX_SEGMENT_SIZE);
    AStream.ReadBuffer(xBuffer, xReadLength);
    Self.putSegment(AStatus, xReadLength, @xBuffer[0]);
    Dec(xStreamSize, xReadLength);
  end;
end;

procedure TFbBlobHelper.SaveToStream(AStatus: IStatus; AStream: TStream);
var
  xInfo: TFbBlobInfo;
  Buffer: array [0 .. MAX_SEGMENT_SIZE] of Byte;
  xBytesRead: Cardinal;
  xBufferSize: Cardinal;
begin
  AStream.Position := 0;
  xBufferSize := Min(SizeOf(Buffer), MAX_SEGMENT_SIZE);
  while True do
  begin
    case Self.getSegment(AStatus, xBufferSize, @Buffer[0], @xBytesRead) of
      IStatus.RESULT_OK:
        AStream.WriteBuffer(Buffer, xBytesRead);
      IStatus.RESULT_SEGMENT:
        AStream.WriteBuffer(Buffer, xBytesRead);
    else
      break;
    end;
  end;
end;

end.
]]>      
    </programlisting>
    </para>
    <para> Теперь вы можете значительно упростить операции с типом BLOB, например вышеприведенная
      функция сохранения BLOB в файл может быть переписана так: <programlisting language="delphi">
<![CDATA[ 
procedure TLoadBlobFromFileFunc.execute(AStatus: IStatus;
  AContext: IExternalContext; AInMsg: Pointer; AOutMsg: Pointer);
var
  xInput: TInputPtr;
  xOutput: TOutputPtr;
  xFileName: string;
  xStream: TFileStream;
  att: IAttachment;
  trx: ITransaction;
  blob: IBlob;
begin
  xInput := AInMsg;
  xOutput := AOutMsg;
  if xInput.filenameNull then
  begin
    xOutput.blobDataNull := True;
    Exit;
  end;
  xOutput.blobDataNull := False;
  // получаем имя файла
  xFileName := TEncoding.UTF8.GetString(TBytes(@xInput.filename.str), 0,
    xInput.filename.len * 4);
  SetLength(xFileName, xInput.filename.len);
  // читаем файл в поток
  xStream := TFileStream.Create(xFileName, fmOpenRead or fmShareDenyNone);
  att := AContext.getAttachment(AStatus);
  trx := AContext.getTransaction(AStatus);
  blob := nil;
  try
    // создаём новый blob  
    blob := att.createBlob(AStatus, trx, @xOutput.blobData, 0, nil);
    // загружаем содержимое потока в BLOB
    blob.LoadFromStream(AStatus, xStream);    
    // закрываем BLOB
    blob.close(AStatus);
	blob := nil;
  finally
    if Assigned(blob) then
      blob.release;
    att.release;
    trx.release;
    xStream.Free;
  end;
end;
]]>
            </programlisting>
    </para>
  </section>
</chapter>
