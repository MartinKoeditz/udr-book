<!DOCTYPE chapter>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="udr-message" xml:lang="ru">
    <info>
        <title>Сообщения</title>
    </info>

    <para>Под сообщением в UDR понимается область памяти фиксированного размера для передачи в
        процедуру или функцию входных аргументов, или возврата выходных аргументов. Для внешних
        триггеров на события записи таблицы сообщения используются для получения и возврата данных в
        NEW и OLD.</para>

    <para>Для доступа к отдельным переменным или полям таблицы, необходимо знать как минимум тип
        этой переменной, и смещение от начала буфера сообщений. Как уже упоминалось ранее для этого
        существует два способа: <itemizedlist>
            <listitem>
                <para>преобразование указателя на буфер сообщения к указателю на статическую
                    структуру (в Delphi это запись, т.е. record);</para>
            </listitem>
            <listitem>
                <para>получение смещений с помощью экземпляра класса реализующего интерфейс
                        <interfacename>IMessageMetadata</interfacename>, и чтение/запись из буфера
                    данных, размером соответствующим типу переменной или поля.</para>
            </listitem>
        </itemizedlist></para>

    <para>Первый способ является наиболее быстрым, второй — более гибким, так как в ряде случаев
        позволяет изменять типы и размеры для входных и выходных переменных или полей таблицы без
        перекомпиляции динамической библиотеки содержащей UDR.</para>

    <section xml:id="message-record">
        <title>Работа с буфером сообщения с использованием структуры</title>

        <para>Как говорилось выше мы можем работать с буфером сообщений через указатель на
            структуру. Такая структура выглядит следующим образом: <programlisting>
<![CDATA[           
TMyStruct = record
  <var_1>: <type_1>;
  <nullIndicator_1>: WordBool;
  <var_2>: <type_1>;
  <nullIndicator_2>: WordBool;
  ...
  <var_N>: <type_1>;
  <nullIndicator_N>: WordBool;
end;
PMyStruct = ^TMyStruct;
]]> 
        </programlisting>
        </para>
        <para>Типы членов данных должны соответствовать типам входных/выходных переменных или полей
            (для триггеров). Null-индикатор должен быть после каждой переменной/поля, даже если у
            них есть ограничение NOT NULL. Null-индикатор занимает 2 байта. Значение -1 обозначает
            что переменная/поле имеют значение NULL. Поскольку на данный момент в NULL-индикатор
            пишется только признак NULL, то удобно отразить его на 2-х байтный логический тип. Типы
            данных SQL отображаются в структуре следующим образом: <table frame="all">
                <?dbfo keep-together='auto'?>
                <title>Отображение типов SQL на типы Delphi</title>
                <tgroup cols="3">
                    <colspec colname="c1" colnum="1" colwidth="1.0*"/>
                    <colspec colname="c2" colnum="2" colwidth="2.2*"/>
                    <colspec colname="c3" colnum="3" colwidth="2.0*"/>
                    <thead>
                        <row>
                            <entry>SQL тип</entry>
                            <entry>Delphi тип</entry>
                            <entry>Замечание</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry><code>BOOLEAN</code></entry>
                            <entry><code>Boolean</code>, <code>ByteBool</code></entry>
                            <entry/>
                        </row>
                        <row>
                            <entry><code>SMALLINT</code></entry>
                            <entry><code>Smallint</code></entry>
                            <entry/>
                        </row>
                        <row>
                            <entry><code>INTEGER</code></entry>
                            <entry><code>Integer</code></entry>
                            <entry/>
                        </row>
                        <row>
                            <entry><code>BIGINT</code></entry>
                            <entry><code>Int64</code></entry>
                            <entry/>
                        </row>
                        <row>
                            <entry><code>FLOAT</code></entry>
                            <entry><code>Single</code></entry>
                            <entry/>
                        </row>
                        <row>
                            <entry><code>DOUBLE PRECISION</code></entry>
                            <entry><code>Double</code></entry>
                            <entry/>
                        </row>
                        <row>
                            <entry><code>NUMERIC(<replaceable>N</replaceable>,
                                        <replaceable>M</replaceable>)</code></entry>
                            <entry>
                                <para> Тип данных зависит от точности и диалекта: <itemizedlist>
                                        <listitem>
                                            <para>1-4 — <code>Smallint</code>;</para>
                                        </listitem>
                                        <listitem>
                                            <para>5-9 — <code>Integer</code>;</para>
                                        </listitem>
                                        <listitem>
                                            <para>10-18 (3 диалект) — <code>Int64</code>;</para>
                                        </listitem>
                                        <listitem>
                                            <para>10-15 (1 диалект) — <code>Double</code>.</para>
                                        </listitem>
                                    </itemizedlist></para>
                            </entry>
                            <entry>
                                <para>В качестве значения в сообщение будет передано число
                                    умноженное на 10<superscript>M</superscript>.</para>
                            </entry>
                        </row>
                        <row>
                            <entry><code>DECIMAL(<replaceable>N</replaceable>,
                                        <replaceable>M</replaceable>)</code></entry>
                            <entry>
                                <para> Тип данных зависит от точности и диалекта: <itemizedlist>
                                        <listitem>
                                            <para>1-4 — <code>Integer</code>;</para>
                                        </listitem>
                                        <listitem>
                                            <para>5-9 — <code>Integer</code>;</para>
                                        </listitem>
                                        <listitem>
                                            <para>10-18 (3 диалект) — <code>Int64</code>;</para>
                                        </listitem>
                                        <listitem>
                                            <para>10-15 (1 диалект) — <code>Double</code>.</para>
                                        </listitem>
                                    </itemizedlist></para>
                            </entry>
                            <entry>
                                <para>В качестве значения в сообщение будет передано число
                                    умноженное на 10<superscript>M</superscript>.</para>
                            </entry>
                        </row>
                        <row>
                            <entry><code>CHAR(<replaceable>N</replaceable>)</code></entry>
                            <entry><code>array[0 .. <replaceable>M</replaceable>] of
                                AnsiChar</code></entry>
                            <entry>
                                <para><replaceable>M</replaceable> вычисляется по формуле <code>M =
                                        N * BytesPerChar - 1</code>, где
                                        <replaceable>BytesPerChar</replaceable> - количество байт на
                                    символ, зависит от кодировки переменной/поля. Например для UTF-8
                                    - это 4 байт/символ, для WIN1251 - 1 байт/символ.</para>
                            </entry>
                        </row>
                        <row>
                            <entry><code>VARCHAR(<replaceable>N</replaceable>)</code></entry>
                            <entry>
                                <para>
                                    <programlisting>
record
  Length: Smallint;
  Data: array[0 .. <replaceable>M</replaceable>] of AnsiChar;
end
                                </programlisting>
                                </para>
                            </entry>
                            <entry>
                                <para><replaceable>M</replaceable> вычисляется по формуле <code>M =
                                        N * BytesPerChar - 1</code>, где
                                        <replaceable>BytesPerChar</replaceable> - количество байт на
                                    символ, зависит от кодировки переменной/поля. Например для UTF-8
                                    - это 4 байт/символ, для WIN1251 - 1 байт/символ. В
                                        <replaceable>Length</replaceable> передаётся реальная длина
                                    строки в байтах.</para>
                            </entry>
                        </row>
                        <row>
                            <entry><code>DATE</code></entry>
                            <entry><code>ISC_DATE</code></entry>
                            <entry/>
                        </row>
                        <row>
                            <entry><code>TIME</code></entry>
                            <entry><code>ISC_TIME</code></entry>
                            <entry/>
                        </row>
                        <row>
                            <entry><code>TIMESTAMP</code></entry>
                            <entry><code>ISC_TIMESTAMP</code></entry>
                            <entry>
                                <para>Тип <code>ISC_TIMESTAMP</code> не определён в
                                        <filename>Firebird.pas</filename>, вы можете определить его
                                    сами следующим образом:
                                    <programlisting>
ISC_TIMESTAMP = record
  date: ISC_DATE;
  time: ISC_TIME;
end;                                    
                                </programlisting>
                                </para>
                            </entry>
                        </row>
                        <row>
                            <entry><code>BLOB</code></entry>
                            <entry><code>ISC_QUAD</code></entry>
                            <entry>
                                <para>Содержимое BLOB никогда не передаётся непосредственно, вместо
                                    него передаётся BlobId. Как работать с типом BLOB будет
                                    рассказано в главе <link linkend="udr-blob">Работа с типом
                                        BLOB</link>.</para>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table></para>
        <para>Теперь рассмотрим несколько примеров того как составлять структуры сообщений по
            декларациям процедур, функций или триггеров.</para>
        <example>
            <title>Структуры сообщений для функции</title>

            <para>Предположим у нас есть внешняя функция объявленная следующим образом: <programlisting language="sql">
<![CDATA[
function SUM_ARGS(A SMALLINT, B INTEGER) RETURNS BIGINT
....
]]> 
            </programlisting>
            </para>
            <para>В этом случае структуры для входных и выходных сообщений будут выглядеть так: <programlisting language="delphi">
<![CDATA[
TInput = record
  A: Smallint;
  ANull: WordBool;
  B: Integer;
  BNull: WordBool;
end;
PInput = ^TInput;

TOutput = record
  Value: Int64;
  Null: WordBool;
end;
POutput = ^TOutput;
]]> 
            </programlisting>
            </para>
            <para>Если та же самая функция определена с другими типами (в 3 диалекте): <programlisting language="sql">
<![CDATA[
function SUM_ARGS(A NUMERIC(4, 2), B NUMERIC(9, 3)) RETURNS NUMERIC(18, 6)
....
]]> 
            </programlisting>
            </para>
            <para>В этом случае структуры для входных и выходных сообщений будут выглядеть так: <programlisting language="delphi">
<![CDATA[
TInput = record
  A: Smallint;
  ANull: WordBool;
  B: Integer;
  BNull: WordBool;
end;
PInput = ^TInput;

TOutput = record
  Value: Int64;
  Null: WordBool;
end;
POutput = ^TOutput;
]]> 
            </programlisting>
            </para>
        </example>
        <example>
            <title>Структуры сообщений для строковых параметров</title>

            <para>Предположим у нас есть внешняя процедура объявленная следующим образом: <programlisting language="sql">
<![CDATA[
procedure SOME_PROC(A CHAR(3) CHARACTER SET WIN1251, B VARCHAR(10) CHARACTER SET UTF8)
....
]]> 
            </programlisting>
            </para>
            <para>В этом случае структуры для входного сообщений будет выглядеть так: <programlisting language="delphi">
<![CDATA[
TInput = record
  A: array[0..2] of AnsiChar;
  ANull: WordBool;
  B: record
    Length: Smallint;
    Value: array[0..39] of AnsiChar;
  end;  
  BNull: WordBool;
end;
PInput = ^TInput;
]]> 
            </programlisting>
            </para>
        </example>
    </section>
    <section xml:id="message-metadata">
        <info>
            <title>Работа с буфером сообщений с помощью IMessageMetadata</title>
        </info>

        <para>Как было описано выше с буфером сообщений можно работать с использованием экземпляра
            объекта реализующего интерфейс <interfacename>IMessageMetadata</interfacename>. Этот
            интерфейс позволяет узнать о переменной/поле следующие сведения: <itemizedlist>
                <listitem>
                    <para>имя переменной/поля;</para>
                </listitem>
                <listitem>
                    <para>тип данных;</para>
                </listitem>
                <listitem>
                    <para>набор символов для строковых данных;</para>
                </listitem>
                <listitem>
                    <para>подтип для типа данных BLOB;</para>
                </listitem>
                <listitem>
                    <para>размер буфера в байтах под переменную/поле;</para>
                </listitem>
                <listitem>
                    <para>может ли переменная/поле принимать значение NULL;</para>
                </listitem>
                <listitem>
                    <para>смещение в буфере сообщений для данных;</para>
                </listitem>
                <listitem>
                    <para>смещение в буфере сообщений для NULL-индикатора.</para>
                </listitem>
            </itemizedlist></para>

        <section xml:id="message-imessagemetadata">
            <title>Методы интерфейса IMessageMetadata</title>

            <para>
                <orderedlist>
                    <listitem>
                        <para>getCount</para>
                        <para>
                            <programlisting language="cpp">
<![CDATA[
unsigned getCount(StatusType* status)
]]>
</programlisting>
                        </para>
                        <para>возвращает количество полей/параметров в сообщении. Во всех вызовах,
                            содержащих индексный параметр, это значение должно быть: 0 &lt;= index
                            &lt; getCount(). </para>
                    </listitem>
                    <listitem>
                        <para>getField</para>
                        <para>
                            <programlisting language="cpp">
<![CDATA[
const char* getField(StatusType* status, unsigned index)
]]>
</programlisting>
                        </para>
                        <para>возвращает имя поля. </para>
                    </listitem>
                    <listitem>
                        <para>getRelation</para>
                        <para>
                            <programlisting language="cpp">
<![CDATA[
const char* getRelation(StatusType* status, unsigned index)
]]>
</programlisting>
                        </para>
                        <para>возвращает имя отношения (из которого выбрано данное поле). </para>
                    </listitem>
                    <listitem>
                        <para>getOwner</para>
                        <para>
                            <programlisting language="cpp">
<![CDATA[
const char* getOwner(StatusType* status, unsigned index)
]]>
</programlisting>
                        </para>
                        <para>возвращает имя владельца отношения. </para>
                    </listitem>
                    <listitem>
                        <para>getAlias</para>
                        <para>
                            <programlisting language="cpp">
<![CDATA[
const char* getAlias(StatusType* status, unsigned index) 
]]>
</programlisting>
                        </para>
                        <para>возвращает псевдоним поля. </para>
                    </listitem>
                    <listitem>
                        <para>getType</para>
                        <para>
                            <programlisting language="cpp">
<![CDATA[
unsigned getType(StatusType* status, unsigned index) 
]]>
</programlisting>
                        </para>
                        <para>возвращает SQL тип поля. </para>
                    </listitem>
                    <listitem>
                        <para>isNullable</para>
                        <para>
                            <programlisting language="cpp">
<![CDATA[
FB_BOOLEAN isNullable(StatusType* status, unsigned index)
]]>
</programlisting>
                        </para>
                        <para>возвращает true, если поле может принимать значение NULL. </para>
                    </listitem>
                    <listitem>
                        <para>getSubType</para>
                        <para>
                            <programlisting language="cpp">
<![CDATA[
int getSubType(StatusType* status, unsigned index)
]]>
</programlisting>
                        </para>
                        <para>возвращает подтип поля BLOB (0 - двоичный, 1 - текст и т. д.). </para>
                    </listitem>
                    <listitem>
                        <para>getLength</para>
                        <para>
                            <programlisting language="cpp">
<![CDATA[
unsigned getLength(StatusType* status, unsigned index)
]]>
</programlisting>
                        </para>
                        <para>возвращает максимальную длину поля в байтах. </para>
                    </listitem>
                    <listitem>
                        <para>getScale</para>
                        <para>
                            <programlisting language="cpp">
<![CDATA[
int getScale(StatusType* status, unsigned index)
]]>
</programlisting>
                        </para>
                        <para>возвращает масштаб для числового поля. </para>
                    </listitem>
                    <listitem>
                        <para>getCharSet</para>
                        <para>
                            <programlisting language="cpp">
<![CDATA[
unsigned getCharSet(StatusType* status, unsigned index)
]]>
</programlisting>
                        </para>
                        <para>возвращает набор символов для символьных полей и текстового BLOB.
                        </para>
                    </listitem>
                    <listitem>
                        <para>getOffset</para>
                        <para>
                            <programlisting language="cpp">
<![CDATA[
unsigned getOffset(StatusType* status, unsigned index) 
]]>
</programlisting>
                        </para>
                        <para>возвращает смещение данных поля в буфере сообщений (используйте его
                            для доступа к данным в буфере сообщений). </para>
                    </listitem>
                    <listitem>
                        <para>getNullOffset</para>
                        <para>
                            <programlisting language="cpp">
<![CDATA[
unsigned getNullOffset(StatusType* status, unsigned index)  
]]>
</programlisting>
                        </para>
                        <para>возвращает смещение NULL индикатора для поля в буфере сообщений.
                        </para>
                    </listitem>
                    <listitem>
                        <para>getBuilder</para>
                        <para>
                            <programlisting language="cpp">
<![CDATA[
IMetadataBuilder* getBuilder(StatusType* status) 
]]>
</programlisting>
                        </para>
                        <para>возвращает интерфейс <interfacename>IMetadataBuilder</interfacename>,
                            инициализированный метаданными этого сообщения. </para>
                    </listitem>
                    <listitem>
                        <para>getMessageLength</para>
                        <para>
                            <programlisting language="cpp">
<![CDATA[
unsigned getMessageLength(StatusType* status)
]]>
</programlisting>
                        </para>
                        <para>возвращает длину буфера сообщения (используйте его для выделения
                            памяти под буфер). </para>
                    </listitem>
                </orderedlist>
            </para>
        </section>
        <section xml:id="message-imessagemetadata-usage">
            <title>Получение и использование IMessageMetadata</title>

            <para>Экземпляры объектов реализующих интерфейс
                    <interfacename>IMessageMetadata</interfacename> для входных и выходных
                переменных можно получить из интерфейса
                    <interfacename>IRoutineMetadata</interfacename>. Он не передаётся
                непосредственно в экземпляр процедуры, функции или триггера. Это необходимо делать
                явно в фабрике соответствующего типа. Например: <programlisting language="delphi">
<![CDATA[
  // Фабрика для создания экземпляра внешней функции TSumArgsFunction
  TSumArgsFunctionFactory = class(IUdrFunctionFactoryImpl)
    // Вызывается при уничтожении фабрики
    procedure dispose(); override;

    { Выполняется каждый раз при загрузке внешней функции в кеш метаданных

      @param(AStatus Статус вектор)
      @param(AContext Контекст выполнения внешней функции)
      @param(AMetadata Метаданные внешней функции)
      @param(AInBuilder Построитель сообщения для входных метаданных)
      @param(AOutBuilder Построитель сообщения для выходных метаданных)
    }
    procedure setup(AStatus: IStatus; AContext: IExternalContext;
      AMetadata: IRoutineMetadata; AInBuilder: IMetadataBuilder;
      AOutBuilder: IMetadataBuilder); override;

    { Создание нового экземпляра внешней функции TSumArgsFunction

      @param(AStatus Статус вектор)
      @param(AContext Контекст выполнения внешней функции)
      @param(AMetadata Метаданные внешней функции)
      @returns(Экземпляр внешней функции)
    }
    function newItem(AStatus: IStatus; AContext: IExternalContext;
      AMetadata: IRoutineMetadata): IExternalFunction; override;
  end;
 
  // Внешняя функция TSumArgsFunction.
  TSumArgsFunction = class(IExternalFunctionImpl)
  private
    FMetadata: IRoutineMetadata;
  public
    property Metadata: IRoutineMetadata read FMetadata write FMetadata;
  public
    // Вызывается при уничтожении экземпляра функции
    procedure dispose(); override;

    { Этот метод вызывается непосредственно перед execute и сообщает
      ядру наш запрошенный набор символов для обмена данными внутри
      этого метода. Во время этого вызова контекст использует набор символов,
      полученный из ExternalEngine::getCharSet.

      @param(AStatus Статус вектор)
      @param(AContext Контекст выполнения внешней функции)
      @param(AName Имя набора символов)
      @param(AName Длина имени набора символов)
    }
    procedure getCharSet(AStatus: IStatus; AContext: IExternalContext;
      AName: PAnsiChar; ANameSize: Cardinal); override;

    { Выполнение внешней функции

      @param(AStatus Статус вектор)
      @param(AContext Контекст выполнения внешней функции)
      @param(AInMsg Указатель на входное сообщение)
      @param(AOutMsg Указатель на выходное сообщение)
    }
    procedure execute(AStatus: IStatus; AContext: IExternalContext;
      AInMsg: Pointer; AOutMsg: Pointer); override;
  end; 
........................

{ TSumArgsFunctionFactory }

procedure TSumArgsFunctionFactory.dispose;
begin
  Destroy;
end;

function TSumArgsFunctionFactory.newItem(AStatus: IStatus;
  AContext: IExternalContext; AMetadata: IRoutineMetadata): IExternalFunction;
begin
  Result := TSumArgsFunction.Create();
  with Result as TSumArgsFunction do
  begin
    Metadata := AMetadata;
  end;
end;

procedure TSumArgsFunctionFactory.setup(AStatus: IStatus;
  AContext: IExternalContext; AMetadata: IRoutineMetadata;
  AInBuilder, AOutBuilder: IMetadataBuilder);
begin

end;
]]>
</programlisting>
            </para>

            <para>Экземпляры <interfacename>IMessageMetadata</interfacename> для входных и выходных
                переменных можно получить с помощью методов
                    <methodname>getInputMetadata</methodname> и
                    <methodname>getOutputMetadata</methodname> из
                    <interfacename>IRoutineMetadata</interfacename>. Метаданные для полей таблицы,
                на которую написан триггер, можно получить с помощью метода
                    <methodname>getTriggerMetadata</methodname>.</para>

            <important>
                <para>Обратите внимание, жизненный цикл объектов интерфейса
                        <interfacename>IMessageMetadata</interfacename> управляется с помощью
                    подсчёта ссылок. Он наследует интерфейс
                        <interfacename>IReferenceCounted</interfacename>. Методы
                        <methodname>getInputMetadata</methodname> и
                        <methodname>getOutputMetadata</methodname> увеличивают счётчик ссылок на 1
                    для возвращаемых объектов, поэтому после окончания использования этих объектов
                    необходимо уменьшить счётчик ссылок для переменных <code>xInputMetadata</code> и
                        <code>xOutputMetadata</code> вызывав метод <methodname>release</methodname>.
                </para>
            </important>

            <para>Для получения значения соответствующего входного аргумента нам необходимо
                воспользоваться адресной арифметикой. Для этого получаем смещение из
                    <interfacename>IMessageMetadata</interfacename> с помощью метода
                    <methodname>getOffset</methodname> и прибавляем к адресу буфера для входного
                сообщения. После чего полученный результат приводим к соответствующему
                типизированному указателю. Примерна такая же схема работы для получения null
                индикаторов аргументов, только для получения смещений используется метод
                    <methodname>getNullOffset</methodname>..</para>
            <para>
                <programlisting language="delphi">
<![CDATA[
........................

procedure TSumArgsFunction.execute(AStatus: IStatus; AContext: IExternalContext;
  AInMsg, AOutMsg: Pointer);
var
  n1, n2, n3: Integer;
  n1Null, n2Null, n3Null: WordBool;
  Result: Integer;
  resultNull: WordBool;
  xInputMetadata, xOutputMetadata: IMessageMetadata;
begin
  xInputMetadata := FMetadata.getInputMetadata(AStatus);
  xOutputMetadata := FMetadata.getOutputMetadata(AStatus);
  try
    // получаем значения входных аргументов по их смещениям
    n1 := PInteger(PByte(AInMsg) + xInputMetadata.getOffset(AStatus, 0))^;
    n2 := PInteger(PByte(AInMsg) + xInputMetadata.getOffset(AStatus, 1))^;
    n3 := PInteger(PByte(AInMsg) + xInputMetadata.getOffset(AStatus, 2))^;
    // получаем значения null-индикаторов входных аргументов по их смещениям
    n1Null := PWordBool(PByte(AInMsg) +
      xInputMetadata.getNullOffset(AStatus, 0))^;
    n2Null := PWordBool(PByte(AInMsg) +
      xInputMetadata.getNullOffset(AStatus, 1))^;
    n3Null := PWordBool(PByte(AInMsg) +
      xInputMetadata.getNullOffset(AStatus, 2))^;
    // по умолчанию выходной аргемент = NULL, а потому выставляем ему nullFlag
    resultNull := True;
    Result := 0;
    // если один из аргументов NULL значит и результат NULL
    // в противном случае считаем сумму аргументов
    if not(n1Null or n2Null or n3Null) then
    begin
      Result := n1 + n2 + n3;
      // раз есть результат, то сбрасываем NULL флаг
      resultNull := False;
    end;
    PWordBool(PByte(AInMsg) + xOutputMetadata.getNullOffset(AStatus, 0))^ :=
      resultNull;
    PInteger(PByte(AInMsg) + xOutputMetadata.getOffset(AStatus, 0))^ := Result;
  finally
    xInputMetadata.release;
    xOutputMetadata.release;
  end;
end;

]]>
</programlisting>
            </para>
            <note>
                <para>В главе <link linkend="udr-contexts">Контекст соединения и транзакции</link>
                    приведён большой пример для работы с различными SQL типами с использованием
                    интерфейса <interfacename>IMessageMetadata</interfacename>.</para>
            </note>
        </section>
    </section>
</chapter>
