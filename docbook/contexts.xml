<!DOCTYPE chapter>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="udr-contexts" xml:lang="ru">
  <info>
    <title>Контекст соединения и транзакции</title>
  </info>

  <para>Если ваша внешняя процедура, функция или триггер должна получать данные из собственной базы
    данных не через входные аргументы, а например через запрос, то вам потребуется получать контекст
    текущего соединения и/или транзакции. Кроме того, контекст соединения и транзакции необходим
    если вы будете работать с типом BLOB.</para>
  <para>Контекст выполнения текущей процедуры, функции или триггера передаётся в качестве параметра
    с типом <interfacename>IExternalContext</interfacename> в метод <methodname>execute</methodname>
    триггера или функции, или в метод <methodname>open</methodname> процедуры. Интерфейс
      <interfacename>IExternalContext</interfacename> позволяет получить текущее соединение с
    помощью метода <methodname>getAttachment</methodname>, и текущую транзакцию с помощью метода
      <methodname>getTransaction</methodname>. Это даёт большую гибкость вашим UDR, например вы
    можете выполнять запросы к текущей базе данных с сохранением текущего сессионного окружения, в
    той же транзакции или в новой транзакции, созданной с помощью метода
      <methodname>startTransaction</methodname> интерфейса
      <interfacename>IExternalContext</interfacename>. В последнем случае запрос будет выполнен так
    как будто он выполняется в автономной транзакции. Кроме того, вы можете выполнить запрос к
    внешней базе данных с использованием транзакции присоединённой к текущей транзакции, т.е.
    транзакции с двухфазным подтверждением (2PC).</para>
  <para>В качестве примера работы с контекстом выполнения функции напишем функцию, которая будет
    сериализовать результат выполнения SELECT запроса в формате JSON. Она объявлена следующим
    образом: <programlisting language="sql">
<![CDATA[ 
create function GetJson (
    sql_text blob sub_type text character set utf8,
    sql_dialect smallint not null default 3
) returns returns blob sub_type text character set utf8
external name 'JsonUtils!getJson'
engine udr;
]]>
            </programlisting>
  </para>
  <para>Поскольку мы позволяем выполнять произвольный SQL запрос, то мы не знаем заранее формат
    выходных полей, и мы не сможем использовать структуру с фиксированными полями. В этом случае нам
    придётся работать с интерфейсом <interfacename>IMessageMetadata</interfacename>. Мы уже
    сталкивались с ним ранее, но на этот раз придётся работать с ним более основательно, поскольку
    мы должны обрабатывать все существующие типы Firebird.</para>
  <note>
    <para>В JSON можно закодировать практически любые типы данных кроме бинарных. Для кодирования
      типов CHAR, VARCHAR с OCTETS NONE и BLOB SUB_TYPE BINARY будем кодировать бинарное содержимое
      с помощью кодирования base64, которое уже можно размещать в JSON.</para>
  </note>
  <para>Зарегистрируем фабрику нашей функции: <programlisting language="delphi">
<![CDATA[ 
function firebird_udr_plugin(AStatus: IStatus; AUnloadFlagLocal: BooleanPtr;
  AUdrPlugin: IUdrPlugin): BooleanPtr; cdecl;
begin
  // регистрируем функцию
  AUdrPlugin.registerFunction(AStatus, 'getJson', TFunctionSimpleFactory<TJsonFunction>.Create());

  theirUnloadFlag := AUnloadFlagLocal;
  Result := @myUnloadFlag;
end;
]]>
            </programlisting>
  </para>

  <para>Теперь объявим структуры для входного и выходного сообщения, а так же интерфейсную часть
    нашей функции: <programlisting language="delphi">
<![CDATA[ 
unit JsonFunc;

{$IFDEF FPC}
{$MODE objfpc}{$H+}
{$DEFINE DEBUGFPC}
{$ENDIF}

interface

uses
  Firebird,
  UdrFactories,
  FbTypes,
  FbCharsets,
  SysUtils,
  System.NetEncoding,
  System.Json;

// *********************************************************
// create function GetJson (
//   sql_text blob sub_type text,
//   sql_dialect smallint not null default 3
// ) returns blob sub_type text character set utf8
// external name 'JsonUtils!getJson'
// engine udr;
// *********************************************************

type

  TInput = record
    SqlText: ISC_QUAD;
    SqlNull: WordBool;
    SqlDialect: Smallint;
    SqlDialectNull: WordBool;
  end;

  InputPtr = ^TInput;

  TOutput = record
    Json: ISC_QUAD;
    NullFlag: WordBool;
  end;

  OutputPtr = ^TOutput;

  // Внешняя функция TSumArgsFunction.
  TJsonFunction = class(IExternalFunctionImpl)
  public
    procedure dispose(); override;

    procedure getCharSet(AStatus: IStatus; AContext: IExternalContext;
      AName: PAnsiChar; ANameSize: Cardinal); override;

    { Преобразует целое в строку в соответствии с масштабом

      @param(AValue Значение)
      @param(Scale Масштаб)
      @returns(Строковое представление масштабированного целого)
    }
    function MakeScaleInteger(AValue: Int64; Scale: Smallint): string;

    { Добавляет закодированную запись в массив объектов Json

      @param(AStatus Статус вектор)
      @param(AContext Контекст выполнения внешней функции)
      @param(AJson Массив объектов Json)
      @param(ABuffer Буфер записи)
      @param(AMeta Метаданные курсора)
      @param(AFormatSetting Установки формата даты и времени)
    }
    procedure writeJson(AStatus: IStatus; AContext: IExternalContext;
      AJson: TJsonArray; ABuffer: PByte; AMeta: IMessageMetadata;
      AFormatSettings: TFormatSettings);

    { Выполнение внешней функции

      @param(AStatus Статус вектор)
      @param(AContext Контекст выполнения внешней функции)
      @param(AInMsg Указатель на входное сообщение)
      @param(AOutMsg Указатель на выходное сообщение)
    }
    procedure execute(AStatus: IStatus; AContext: IExternalContext;
      AInMsg: Pointer; AOutMsg: Pointer); override;
  end;
]]>
            </programlisting>
  </para>
  <para>Дополнительный метод <methodname>MakeScaleInteger</methodname> предназначен для
    преобразования масштабируемых чисел в строку, метод <methodname>writeJson</methodname> кодирует
    очередную запись выбранную из курсора в Json объект и добавляет его в массив таких объектов. Эти
    методы мы опишем позже, а пока приведём основной метод <methodname>execute</methodname> для
    выполнения внешней функции. <programlisting language="delphi">
<![CDATA[
procedure TJsonFunction.execute(AStatus: IStatus; AContext: IExternalContext;
  AInMsg, AOutMsg: Pointer);
var
  xFormatSettings: TFormatSettings;
  xInput: InputPtr;
  xOutput: OutputPtr;
  att: IAttachment;
  tra: ITransaction;
  stmt: IStatement;
  inBlob, outBlob: IBlob;
  inStream: TBytesStream;
  outStream: TStringStream;
  cursorMetaData: IMessageMetadata;
  rs: IResultSet;
  msgLen: Cardinal;
  msg: Pointer;
  jsonArray: TJsonArray;
begin
  xInput := AInMsg;
  xOutput := AOutMsg;
  // если один из входных аргументов NULL, то и результат NULL
  if xInput.SqlNull or xInput.SqlDialectNull then
  begin
    xOutput.NullFlag := True;
    Exit;
  end;
  xOutput.NullFlag := False;
  // установки форматирования даты и времени
  xFormatSettings := TFormatSettings.Create;
  xFormatSettings.DateSeparator := '-';
  xFormatSettings.TimeSeparator := ':';
  // создаём поток байт для чтения blob
  inStream := TBytesStream.Create(nil);
  outStream := TStringStream.Create('', 65001);
  jsonArray := TJsonArray.Create;
  // получение текущего соединения и транзакции
  att := AContext.getAttachment(AStatus);
  tra := AContext.getTransaction(AStatus);
  stmt := nil;
  inBlob := nil;
  outBlob := nil;
  try
    // читаем BLOB в поток
    inBlob := att.openBlob(AStatus, tra, @xInput.SqlText, 0, nil);
    inBlob.SaveToStream(AStatus, inStream);
    inBlob.close(AStatus);
    // подготавливаем оператор
    stmt := att.prepare(AStatus, tra, inStream.Size, @inStream.Bytes[0],
      xInput.SqlDialect, IStatement.PREPARE_PREFETCH_METADATA);
    // получаем выходные метаданные курсора
    cursorMetaData := stmt.getOutputMetadata(AStatus);
    // открываем курсор
    rs := stmt.openCursor(AStatus, tra, nil, nil, nil, 0);
    // выделяем буфер нужного размера
    msgLen := cursorMetaData.getMessageLength(AStatus);
    msg := AllocMem(msgLen);
    try
      // читаем каждую запись курсора
      while rs.fetchNext(AStatus, msg) = IStatus.RESULT_OK do
      begin
        // и пишем её в JSON
        writeJson(AStatus, AContext, jsonArray, msg, cursorMetaData, xFormatSettings);
      end;
    finally
      // освобождаем буфер
      FreeMem(msg);
    end;
    // закрываем курсор
    rs.close(AStatus);
    // пишем JSON в поток
    outStream.WriteString(jsonArray.ToJSON);

    // пишем json в выходной blob
    outBlob := att.createBlob(AStatus, tra, @xOutput.Json, 0, nil);
    outBlob.LoadFromStream(AStatus, outStream);
    outBlob.close(AStatus);
  finally
    if Assigned(inBlob) then
      inBlob.release;
    if Assigned(stmt) then
      stmt.release;
    if Assigned(outBlob) then
      outBlob.release;
    tra.release;
    att.release;
    jsonArray.Free;
    inStream.Free;
    outStream.Free;
  end;
end;
]]>    
  </programlisting>
  </para>
  <para>Первым делом получаем из контекста выполнения функции текущее подключение и текущую
    транзакцию с помощью методов <methodname>getAttachment</methodname> и
      <methodname>getTransaction</methodname> интерфейса
      <interfacename>IExternalContext</interfacename>. Затем читаем содержимое BLOB для получения
    текста SQL запроса. Запрос подготавливается с помощью метода <methodname>prepare</methodname>
    интерфейса <interfacename>IAttachment</interfacename>. Пятым параметром передаётся SQL диалект
    полученный из входного параметра нашей функции. Шестым параметром передаём флаг
      <code>IStatement.PREPARE_PREFETCH_METADATA</code>, что обозначает что мы хотим получить
    метаданные курсора вместе с результатом препарирования запроса. Сами выходные метаданные курсора
    получаем с помощью метода <methodname>getOutputMetadata</methodname> интерфейса
      <interfacename>IStatement</interfacename>.</para>
  <note>
    <para>На самом деле метод <methodname>getOutputMetadata</methodname> вернёт выходные метаданные
      в любом случае. Флаг <code>IStatement.PREPARE_PREFETCH_METADATA</code> заставит получить
      метаданные вместе с результатом подготовки запроса за один сетевой пакет. Поскольку мы
      выполняем запрос в рамках текущего соединение никакого сетевого обмена не будет, и это не
      принципиально.</para>
  </note>
  <para>Далее открываем курсор с помощью метода <methodname>openCursor</methodname> в рамках текущей
    транзакции (параметр 2). Получаем размер выходного буфера под результат курсора с помощью метода
      <methodname>getMessageLength</methodname> интерфейса
      <interfacename>IMessageMetadata</interfacename>. Это позволяет выделить память под буфер,
    которую мы освободим сразу после вычитки последней записи курсора.</para>
  <para>Записи курсора читаются с помощью метода <methodname>fetchNext</methodname> интерфейса
      <interfacename>IResultSet</interfacename>. Этот метод заполняет буфер <code>msg</code>
    значениями полей курсора и возвращает <code>IStatus.RESULT_OK</code> до тех пор, пока записи
    курсора не кончатся. Каждая прочитанная запись передаётся в метод
      <methodname>writeJson</methodname>, который добавляет объект типа
      <classname>TJsonObject</classname> с сериализованной записью курсора в массив
      <classname>TJsonArray</classname>.</para>
  <para>После завершения работы с курсором, закрываем его методом <methodname>close</methodname>,
    преобразуем массив Json объектов в строку, пишем её в выходной поток, который записываем в
    выходной Blob.</para>
  <para>Теперь разберём метод <methodname>writeJson</methodname>. Объект
      <interfacename>IUtil</interfacename> потребуется нам для того, чтобы получать функции для
    декодирования даты и времени. В этом методе активно задействована работа с метаданными выходных
    полей курсора с помощью интерфейса <interfacename>IMessageMetadata</interfacename>. Первым дело
    создаём объект тип <classname>TJsonObject</classname> в который будем записывать значения полей
    текущей записи. В качестве имён ключей будем использовать алиасы полей из курсора. Если
    установлен NullFlag, то пишем значение null для ключа и переходим к следующему полю, в противном
    случае анализируем тип поля и пишем его значение в Json. <programlisting language="delphi">
<![CDATA[
function TJsonFunction.MakeScaleInteger(AValue: Int64; Scale: Smallint): string;
var
  L: Integer;
begin
  Result := AValue.ToString;
  L := Result.Length;
  if (-Scale >= L) then
    Result := '0.' + Result.PadLeft(-Scale, '0')
  else
    Result := Result.Insert(Scale + L, '.');
end;

procedure TJsonFunction.writeJson(AStatus: IStatus; AContext: IExternalContext;
  AJson: TJsonArray; ABuffer: PByte; AMeta: IMessageMetadata;
  AFormatSettings: TFormatSettings);
var
  jsonObject: TJsonObject;
  i: Integer;
  FieldName: string;
  NullFlag: WordBool;
  fieldType: Cardinal;
  pData: PByte;
  util: IUtil;
  metaLength: Integer;
  // типы
  CharBuffer: array [0 .. 35766] of Byte;
  charLength: Smallint;
  charset: TFBCharSet;
  StringValue: string;
  SmallintValue: Smallint;
  IntegerValue: Integer;
  BigintValue: Int64;
  Scale: Smallint;
  SingleValue: Single;
  DoubleValue: Double;
  BooleanValue: Boolean;
  DateValue: ISC_DATE;
  TimeValue: ISC_TIME;
  TimestampValue: ISC_TIMESTAMP;
  DateTimeValue: TDateTime;
  year, month, day: Cardinal;
  hours, minutes, seconds, fractions: Cardinal;
  blobId: ISC_QUADPtr;
  BlobSubtype: Smallint;
  blob: IBlob;
  att: IAttachment;
  tra: ITransaction;
  textStream: TStringStream;
  binaryStream: TBytesStream;
begin
  // Получаем IUtil
  util := AContext.getMaster().getUtilInterface();
  // Создаём объект TJsonObject в которой будем
  // записывать значение полей записи
  jsonObject := TJsonObject.Create;
  for i := 0 to AMeta.getCount(AStatus) - 1 do
  begin
    // получаем алиас поля в запросе
    FieldName := AMeta.getAlias(AStatus, i);
    NullFlag := PWordBool(ABuffer + AMeta.getNullOffset(AStatus, i))^;
    if NullFlag then
    begin
      // если NULL пишем его в JSON и переходим к следующему полю
      jsonObject.AddPair(FieldName, TJsonNull.Create);
      continue;
    end;
    // получаем указатель на данные поля
    pData := ABuffer + AMeta.getOffset(AStatus, i);
    // аналог AMeta->getType(AStatus, i) & ~1
    fieldType := AMeta.getType(AStatus, i) and not 1;
    case fieldType of
      // VARCHAR
      SQL_VARYING:
        begin
          // размер буфера для VARCHAR
          metaLength := AMeta.getLength(AStatus, i);
          charset := TFBCharSet(AMeta.getCharSet(AStatus, i));
          // Для VARCHAR первые 2 байта - длина в байтах
          charLength := PSmallint(pData)^;
          // бинарные данные кодируем в base64
          if charset = CS_BINARY then
            StringValue := TNetEncoding.Base64.EncodeBytesToString((pData + 2),
              charLength)
          else
          begin
            // копируем данные в буфер начиная с 3 байта
            Move((pData + 2)^, CharBuffer, metaLength - 2);
            StringValue := charset.GetString(TBytes(@CharBuffer), 0,
              charLength);
          end;
          jsonObject.AddPair(FieldName, StringValue);
        end;
      // CHAR
      SQL_TEXT:
        begin
          // размер буфера для CHAR
          metaLength := AMeta.getLength(AStatus, i);
          charset := TFBCharSet(AMeta.getCharSet(AStatus, i));
          // бинарные данные кодируем в base64
          if charset = CS_BINARY then
            StringValue := TNetEncoding.Base64.EncodeBytesToString((pData + 2),
              metaLength)
          else
          begin
            // копируем данные в буфер
            Move(pData^, CharBuffer, metaLength);
            StringValue := charset.GetString(TBytes(@CharBuffer), 0,
              metaLength);
            charLength := metaLength div charset.GetCharWidth;
            SetLength(StringValue, charLength);
          end;
          jsonObject.AddPair(FieldName, StringValue);
        end;
      // FLOAT
      SQL_FLOAT:
        begin
          SingleValue := PSingle(pData)^;
          jsonObject.AddPair(FieldName, TJSONNumber.Create(SingleValue));
        end;
      // DOUBLE PRECISION
      // DECIMAL(p, s), где p = 10..15 в 1 диалекте
      SQL_DOUBLE, SQL_D_FLOAT:
        begin
          DoubleValue := PDouble(pData)^;
          jsonObject.AddPair(FieldName, TJSONNumber.Create(DoubleValue));
        end;
      // INTEGER
      // NUMERIC(p, s), где p = 1..4
      SQL_SHORT:
        begin
          Scale := AMeta.getScale(AStatus, i);
          SmallintValue := PSmallint(pData)^;
          if (Scale = 0) then
          begin
            jsonObject.AddPair(FieldName, TJSONNumber.Create(SmallintValue));
          end
          else
          begin
            StringValue := MakeScaleInteger(SmallintValue, Scale);
            jsonObject.AddPair(FieldName, TJSONNumber.Create(StringValue));
          end;
        end;
      // INTEGER
      // NUMERIC(p, s), где p = 5..9
      // DECIMAL(p, s), где p = 1..9
      SQL_LONG:
        begin
          Scale := AMeta.getScale(AStatus, i);
          IntegerValue := PInteger(pData)^;
          if (Scale = 0) then
          begin
            jsonObject.AddPair(FieldName, TJSONNumber.Create(IntegerValue));
          end
          else
          begin
            StringValue := MakeScaleInteger(IntegerValue, Scale);
            jsonObject.AddPair(FieldName, TJSONNumber.Create(StringValue));
          end;
        end;
      // BIGINT
      // NUMERIC(p, s), где p = 10..18 в 3 диалекте
      // DECIMAL(p, s), где p = 10..18 в 3 диалекте
      SQL_INT64:
        begin
          Scale := AMeta.getScale(AStatus, i);
          BigintValue := Pint64(pData)^;
          if (Scale = 0) then
          begin
            jsonObject.AddPair(FieldName, TJSONNumber.Create(BigintValue));
          end
          else
          begin
            StringValue := MakeScaleInteger(BigintValue, Scale);
            jsonObject.AddPair(FieldName, TJSONNumber.Create(StringValue));
          end;
        end;
      // TIMESTAMP
      SQL_TIMESTAMP:
        begin
          TimestampValue := PISC_TIMESTAMP(pData)^;
          // получаем составные части даты-времени
          util.decodeDate(TimestampValue.date, @year, @month, @day);
          util.decodeTime(TimestampValue.time, @hours, @minutes, @seconds,
            @fractions);
          // получаем дату-время в родном типе Delphi
          DateTimeValue := EncodeDate(year, month, day) +
            EncodeTime(hours, minutes, seconds, fractions div 10);
          // форматируем дату-время по заданному формату
          StringValue := FormatDateTime('yyyy/mm/dd hh:nn:ss', DateTimeValue,
            AFormatSettings);
          jsonObject.AddPair(FieldName, StringValue);
        end;
      // DATE
      SQL_DATE:
        begin
          DateValue := PISC_DATE(pData)^;
          // получаем составные части даты
          util.decodeDate(DateValue, @year, @month, @day);
          // получаем дату в родном типе Delphi
          DateTimeValue := EncodeDate(year, month, day);
          // форматируем дату по заданному формату
          StringValue := FormatDateTime('yyyy/mm/dd', DateTimeValue,
            AFormatSettings);
          jsonObject.AddPair(FieldName, StringValue);
        end;
      // TIME
      SQL_TIME:
        begin
          TimeValue := PISC_TIME(pData)^;
          // получаем составные части времени
          util.decodeTime(TimeValue, @hours, @minutes, @seconds, @fractions);
          // получаем время в родном типе Delphi
          DateTimeValue := EncodeTime(hours, minutes, seconds,
            fractions div 10);
          // форматируем время по заданному формату
          StringValue := FormatDateTime('hh:nn:ss', DateTimeValue,
            AFormatSettings);
          jsonObject.AddPair(FieldName, StringValue);
        end;
      // BOOLEAN
      SQL_BOOLEAN:
        begin
          BooleanValue := PBoolean(pData)^;
          jsonObject.AddPair(FieldName, TJsonBool.Create(BooleanValue));
        end;
      // BLOB
      SQL_BLOB, SQL_QUAD:
        begin
          BlobSubtype := AMeta.getSubType(AStatus, i);
          blobId := ISC_QUADPtr(pData);
          att := AContext.getAttachment(AStatus);
          tra := AContext.getTransaction(AStatus);
          blob := att.openBlob(AStatus, tra, blobId, 0, nil);
          if BlobSubtype = 1 then
          begin
            // текст
            charset := TFBCharSet(AMeta.getCharSet(AStatus, i));
            // создаём поток с заданной кодировкой
            textStream := TStringStream.Create('', charset.GetCodePage);
            try
              blob.SaveToStream(AStatus, textStream);
              StringValue := textStream.DataString;
            finally
              textStream.Free;
              blob.release;
              tra.release;
              att.release
            end;
          end
          else
          begin
            // все остальные подтипы считаем бинарными
            binaryStream := TBytesStream.Create;
            try
              blob.SaveToStream(AStatus, binaryStream);
              // кодируем строку в base64
              StringValue := TNetEncoding.Base64.EncodeBytesToString
                (binaryStream.Memory, binaryStream.Size);
            finally
              binaryStream.Free;
              blob.release;
              tra.release;
              att.release
            end;
          end;
          jsonObject.AddPair(FieldName, StringValue);
        end;

    end;
  end;
  // добавление записи в формате Json в массив
  AJson.AddElement(jsonObject);
end;
]]>    
  </programlisting>
  </para>
  <note>
    <para>Перечисление типа TFbType отсутствует в стандартном модуле
        <filename>Firebird.pas</filename>. Однако использовать числовые значения не удобно, поэтому
      я написал специальный модуль <link xmlns:xlink="http://www.w3.org/1999/xlink"
        xlink:href="https://github.com/sim1984/udr-book/blob/master/examples/Common/FbTypes.pas"
        >FbTypes</link> в котором разместил некоторые дополнительные типы и константы для
      удобства.</para>
    <para>Перечисление TFBCharSet также отсутствует в модуле <filename>Firebird.pas</filename>. Я
      написал отдельный модуль <link xmlns:xlink="http://www.w3.org/1999/xlink"
        xlink:href="https://github.com/sim1984/udr-book/blob/master/examples/Common/FbCharsets.pas"
        >FbCharsets</link> в котором размещено это перечисление. Кроме того, для этого типа написан
      специальный хелпер, в котором размещены функции для получения названия набора символов, кодовой
      страницы, размера символа в байтах, получение класса <classname>TEncoding</classname> в нужной
      кодировки, а также функцию для преобразования массива байт в юникодную строку Delphi.</para>
  </note>

  <para>Для строк типа CHAR и VARCHAR проверяем кодировку, если это кодировка OCTETS, то кодируем
    строку алгоритмом base64, в противном случае преобразуем данные из буфера в строку Delphi.
    Обратите внимание, что для типа VARCHAR первые 2 байта содержат длину строки в байтах. </para>
  <para>Типы SMALLINT, INTEGER, BIGINT могут быть как обычными целыми числами, так масштабируемыми.
    Масштаб числа можно получить методом <methodname>getScale</methodname> интерфейса
      <interfacename>IMessageMetadata</interfacename>. Если масштаб не равен 0, то требуется
    специальная обработка числа, которая осуществляет методом
      <methodname>MakeScaleInteger</methodname>.</para>
  <para>Типы DATE, TIME и TIMESTAMP декодируется на составные части даты и времени с помощью методов
      <methodname>decodeDate</methodname> и <methodname>decodeTime</methodname> интерфейса
      <interfacename>IUtil</interfacename>. Используем части даты и времени для получения
    даты-времени в стандартном Delphi типе TDateTime.</para>
  <para>С типом BLOB работаем через потоки Delphi. Если BLOB бинарный, то создаём поток типа
      <classname>TBytesStream</classname>. Полученный массив байт кодируем с помощью алгоритма
    base64. Если BLOB текстовый, то используем специализированный поток
      <classname>TStringStream</classname> для строк, который позволяет учесть кодовую страницу.
    Кодовую страницу мы получаем из кодировки BLOB поля.</para>
</chapter>
