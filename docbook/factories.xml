<!DOCTYPE chapter>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="udr-factories" xml:lang="ru">
  <info>
    <title>Фабрики</title>
  </info>

  <para>Вы уже сталкивались с фабриками ранее. Настало время рассмотреть их более подробно.</para>

  <para>Фабрики предназначены для создания экземпляров процедур, функций или триггеров. Класс
    фабрики должен быть наследником одного из интерфейсов
      <interfacename>IUdrProcedureFactory</interfacename>,
      <interfacename>IUdrFunctionFactory</interfacename> или
      <interfacename>IUdrTriggerFactory</interfacename> в зависимости от типа UDR. Их экземпляры
    должны быть зарегистрированы в качестве точки входа UDR в функции
      <function>firebird_udr_plugin</function>. <programlisting language="delphi">
<![CDATA[
function firebird_udr_plugin(AStatus: IStatus; AUnloadFlagLocal: BooleanPtr;
  AUdrPlugin: IUdrPlugin): BooleanPtr; cdecl;
begin
  // регистрируем нашу функцию
  AUdrPlugin.registerFunction(AStatus, 'sum_args',
    TSumArgsFunctionFactory.Create());
  // регистрируем нашу процедуру
  AUdrPlugin.registerProcedure(AStatus, 'gen_rows', TGenRowsFactory.Create());
  // регистрируем наш триггер
  AUdrPlugin.registerTrigger(AStatus, 'test_trigger',
    TMyTriggerFactory.Create());

  theirUnloadFlag := AUnloadFlagLocal;
  Result := @myUnloadFlag;
end;
]]>        
      </programlisting>
  </para>
  <para>В данном примере класс <classname>TSumArgsFunctionFactory</classname> наследует интерфейс
      <interfacename>IUdrFunctionFactory</interfacename>, <classname>TGenRowsFactory</classname>
    наследует интерфейс <interfacename>IUdrProcedureFactory</interfacename>, а
      <classname>TMyTriggerFactory</classname> наследует интерфейс
      <interfacename>IUdrTriggerFactory</interfacename>.</para>
  <para>Экземпляры фабрик создаются и привязываются к точкам входа в момент первой загрузки внешней
    процедуры, функции или триггера. Это происходит один раз при создании каждого процесса Firebird.
    Таким образом, для архитектуры SuperServer для всех соединений будет ровно один экземпляр
    фабрики связанный с каждой точкой входа, для Classic это количество экземпляров будет умножено
    на количество соединений.</para>
  <para>При написании классов фабрик вам необходимо реализовать методы
      <methodname>setup</methodname> и <methodname>newItem</methodname> из интерфейсов
      <interfacename>IUdrProcedureFactory</interfacename>,
      <interfacename>IUdrFunctionFactory</interfacename> или
      <interfacename>IUdrTriggerFactory</interfacename>. <programlisting language="delphi">
<![CDATA[
  IUdrFunctionFactory = class(IDisposable)
	const VERSION = 3;

	procedure setup(status: IStatus; context: IExternalContext; 
	  metadata: IRoutineMetadata; inBuilder: IMetadataBuilder; 
        outBuilder: IMetadataBuilder);
	
	function newItem(status: IStatus; context: IExternalContext; 
	  metadata: IRoutineMetadata): IExternalFunction;
  end;
	
  IUdrProcedureFactory = class(IDisposable)
	const VERSION = 3;

	procedure setup(status: IStatus; context: IExternalContext; 
	  metadata: IRoutineMetadata; inBuilder: IMetadataBuilder; 
        outBuilder: IMetadataBuilder);
	
	function newItem(status: IStatus; context: IExternalContext; 
	  metadata: IRoutineMetadata): IExternalProcedure;
  end;
	
  IUdrTriggerFactory = class(IDisposable)
	const VERSION = 3;

	procedure setup(status: IStatus; context: IExternalContext; 
	  metadata: IRoutineMetadata; fieldsBuilder: IMetadataBuilder);
	
	function newItem(status: IStatus; context: IExternalContext; 
	  metadata: IRoutineMetadata): IExternalTrigger;
  end;
]]>        
      </programlisting>
  </para>
  <para>Кроме того, поскольку эти интерфейсы наследуют интерфейс
      <interfacename>IDisposable</interfacename>, то необходимо так же реализовать метод
      <methodname>dispose</methodname>. Это обозначает что Firebird сам выгрузит фабрику, когда это
    будет необходимо. В методе <methodname>dispose</methodname> необходимо разместить код, который
    освобождает ресурсы, при уничтожении экземпляра фабрики. Для упрощения реализации методов
    интерфейсов удобно воспользоваться классами <classname>IUdrProcedureFactoryImpl</classname>,
      <classname>IUdrFunctionFactoryImpl</classname>, <classname>IUdrTriggerFactoryImpl</classname>.
    Рассмотрим каждый из методов более подробно.</para>

  <section xml:id="udr-factories-newItem">
    <title>Метод newItem</title>

    <para>Метод <methodname>newItem</methodname> вызывается для создания экземпляра внешней
      процедуры, функции или триггера. Создание экземпляров UDR происходит в момент её загрузки в
      кэш метаданных, т.е. при первом вызове процедуры, функции или триггера. В настоящий момент кэш
      метаданных раздельный для каждого соединения для всех архитектур сервера.</para>

    <para>Кэш метаданных процедур и функция связан с их именами в базе данных. Например, две внешние
      функции с разными именами, но одинаковыми точками входа, будут разными экземплярами
        <classname>IUdrFunctionFactory</classname>. Точка входа состоит из имени внешнего модуля и
      имени под которым зарегистрирована фабрика. Как это можно использовать покажем позже. </para>

    <para>В метод <methodname>newItem</methodname> передаётся указатель на статус вектор, контекст
      выполнения UDR и метаданные UDR.</para>

    <para>В простейшем случае реализация этого метода тривиальна
      <programlisting language="delphi">
function TSumArgsFunctionFactory.newItem(AStatus: IStatus; 
  AContext: IExternalContext; AMetadata: IRoutineMetadata): IExternalFunction;
begin
  // создаём экземпляр внешней функции
  Result := TSumArgsFunction.Create();
end;                
                </programlisting>
    </para>

    <para>С помощью <interfacename>IRoutineMetadata</interfacename> вы можете получить формат
      входного и выходного сообщения, тело UDR и другие метаданные. Метаданные можно передать в
      созданный экземпляр UDR. В этом случае в экземпляр класса реализующего вашу UDR необходимо
      добавить поле для хранение метаданных.
      <programlisting language="delphi">
  // Внешняя функция TSumArgsFunction.
  TSumArgsFunction = class(IExternalFunctionImpl)
  private
    FMetadata: IRoutineMetadata;
  public
    property Metadata: IRoutineMetadata read FMetadata write FMetadata;
  public
  ...
  end;
                </programlisting>
    </para>

    <para>В этом случае реализация метода <methodname>newItem</methodname> выглядит следующим
      образом:
      <programlisting language="delphi">
function TSumArgsFunctionFactory.newItem(AStatus: IStatus;
  AContext: IExternalContext; AMetadata: IRoutineMetadata): IExternalFunction;
begin
  Result := TSumArgsFunction.Create();
  with Result as TSumArgsFunction do
  begin
    Metadata := AMetadata;
  end;
end;
                </programlisting>
    </para>

    <section>
      <title>Создание экземпляров UDR в зависимости от их объявления</title>

      <para>В методе <methodname>newItem</methodname> вы можете создавать различные экземпляры
        внешней процедуры или функции в зависимости от её объявления в PSQL. Для этого можно
        использовать информацию полученную из
        <interfacename>IMessageMetadata</interfacename>.</para>

      <para>Допустим мы хотим реализовать PSQL пакет с однотипным набором внешних функций для
        возведения числа в квадрат под различные типы данных и единой точкой входа. <programlisting language="sql">  
<![CDATA[
SET TERM ^ ;

CREATE OR ALTER PACKAGE MYUDR2
AS
begin
  function SqrSmallint(AInput SMALLINT) RETURNS INTEGER;
  function SqrInteger(AInput INTEGER) RETURNS BIGINT;
  function SqrBigint(AInput BIGINT) RETURNS BIGINT;
  function SqrFloat(AInput FLOAT) RETURNS DOUBLE PRECISION;
  function SqrDouble(AInput DOUBLE PRECISION) RETURNS DOUBLE PRECISION;
end^

RECREATE PACKAGE BODY MYUDR2
AS
begin
  function SqrSmallint(AInput SMALLINT) RETURNS INTEGER
  external name 'myudr2!sqrt_func'
  engine udr;

  function SqrInteger(AInput INTEGER) RETURNS BIGINT
  external name 'myudr2!sqrt_func'
  engine udr;

  function SqrBigint(AInput BIGINT) RETURNS BIGINT
  external name 'myudr2!sqrt_func'
  engine udr;

  function SqrFloat(AInput FLOAT) RETURNS DOUBLE PRECISION
  external name 'myudr2!sqrt_func'
  engine udr;

  function SqrDouble(AInput DOUBLE PRECISION) RETURNS DOUBLE PRECISION
  external name 'myudr2!sqrt_func'
  engine udr;

end
^

SET TERM ; ^
]]>
                </programlisting>
      </para>
      <para>Для проверки функций будем использовать следующий запрос
        <programlisting language="sql">  
select
  myudr2.SqrSmallint(1) as n1,
  myudr2.SqrInteger(2) as n2,
  myudr2.SqrBigint(3) as n3,
  myudr2.SqrFloat(3.1) as n4,
  myudr2.SqrDouble(3.2) as n5
from rdb$database
                </programlisting>
      </para>

      <para>Для упрощения работы с <interfacename>IMessageMetadata</interfacename> и буферами можно
        написать удобную обёртку или попробовать совместно использовать
          <interfacename>IMessageMetadata</interfacename> и структуры для отображения сообщений.
        Здесь мы покажем использование второго способа.</para>

      <para>Реализация такой идея достаточно проста: в фабрике функций мы будем создавать различные
        экземпляры функций в зависимости от типа входного аргумента. В современных версиях Delphi вы
        можете использовать дженерики для обобщения кода. <programlisting language="delphi">
<![CDATA[  
.......................
type
  // структура на которое будет отображено входное сообщение
  TSqrInMsg<T> = record
    n1: T;
    n1Null: WordBool;
  end;

  // структура на которое будет отображено выходное сообщение
  TSqrOutMsg<T> = record
    result: T;
    resultNull: WordBool;
  end;

  // Фабрика для создания экземпляра внешней функции TSqrFunction
  TSqrFunctionFactory = class(IUdrFunctionFactoryImpl)
    // Вызывается при уничтожении фабрики
    procedure dispose(); override;

    { Выполняется каждый раз при загрузке внешней функции в кеш метаданных.
      Используется для изменения формата входного и выходного сообщения.

      @param(AStatus Статус вектор)
      @param(AContext Контекст выполнения внешней функции)
      @param(AMetadata Метаданные внешней функции)
      @param(AInBuilder Построитель сообщения для входных метаданных)
      @param(AOutBuilder Построитель сообщения для выходных метаданных)
    }
    procedure setup(AStatus: IStatus; AContext: IExternalContext;
      AMetadata: IRoutineMetadata; AInBuilder: IMetadataBuilder;
      AOutBuilder: IMetadataBuilder); override;

    { Создание нового экземпляра внешней функции TSqrFunction

      @param(AStatus Статус вектор)
      @param(AContext Контекст выполнения внешней функции)
      @param(AMetadata Метаданные внешней функции)
      @returns(Экземпляр внешней функции)
    }
    function newItem(AStatus: IStatus; AContext: IExternalContext;
      AMetadata: IRoutineMetadata): IExternalFunction; override;
  end;


  // Внешняя функция TSqrFunction.
  TSqrFunction<TIn, TOut> = class(IExternalFunctionImpl)
  private
    function sqrExec(AIn: TIn): TOut; virtual; abstract;
  public
    type
      TInput = TSqrInMsg<TIn>;
      TOutput = TSqrOutMsg<TOut>;
      PInput = ^TInput;
      POutput = ^TOutput;
    // Вызывается при уничтожении экземпляра функции
    procedure dispose(); override;

    { Этот метод вызывается непосредственно перед execute и сообщает
      ядру наш запрошенный набор символов для обмена данными внутри
      этого метода. Во время этого вызова контекст использует набор символов,
      полученный из ExternalEngine::getCharSet.

      @param(AStatus Статус вектор)
      @param(AContext Контекст выполнения внешней функции)
      @param(AName Имя набора символов)
      @param(AName Длина имени набора символов)
    }
    procedure getCharSet(AStatus: IStatus; AContext: IExternalContext;
      AName: PAnsiChar; ANameSize: Cardinal); override;

    { Выполнение внешней функции

      @param(AStatus Статус вектор)
      @param(AContext Контекст выполнения внешней функции)
      @param(AInMsg Указатель на входное сообщение)
      @param(AOutMsg Указатель на выходное сообщение)
    }
    procedure execute(AStatus: IStatus; AContext: IExternalContext;
      AInMsg: Pointer; AOutMsg: Pointer); override;
  end;

  TSqrExecSmallint = class(TSqrFunction<Smallint, Integer>)
  public
    function sqrExec(AIn: Smallint): Integer; override;
  end;

  TSqrExecInteger = class(TSqrFunction<Integer, Int64>)
  public
    function sqrExec(AIn: Integer): Int64; override;
  end;

  TSqrExecInt64 = class(TSqrFunction<Int64, Int64>)
  public
    function sqrExec(AIn: Int64): Int64; override;
  end;

  TSqrExecFloat = class(TSqrFunction<Single, Double>)
  public
    function sqrExec(AIn: Single): Double; override;
  end;

  TSqrExecDouble = class(TSqrFunction<Double, Double>)
  public
    function sqrExec(AIn: Double): Double; override;
  end;

implementation

uses
  SysUtils, FbTypes, System.TypInfo;

{ TSqrFunctionFactory }

procedure TSqrFunctionFactory.dispose;
begin
  Destroy;
end;

function TSqrFunctionFactory.newItem(AStatus: IStatus;
  AContext: IExternalContext; AMetadata: IRoutineMetadata): IExternalFunction;
var
  xInputMetadata: IMessageMetadata;
  xInputType: TFBType;
begin
  // получаем тип входного аргумента
  xInputMetadata := AMetadata.getInputMetadata(AStatus);
  xInputType := TFBType(xInputMetadata.getType(AStatus, 0));
  xInputMetadata.release;
  // создаём экземпляр функции в зависимости от типа
  case xInputType of
    SQL_SHORT:
      result := TSqrExecSmallint.Create();

    SQL_LONG:
      result := TSqrExecInteger.Create();
    SQL_INT64:
      result := TSqrExecInt64.Create();

    SQL_FLOAT:
      result := TSqrExecFloat.Create();
    SQL_DOUBLE, SQL_D_FLOAT:
      result := TSqrExecDouble.Create();
  else
    result := TSqrExecInt64.Create();
  end;

end;

procedure TSqrFunctionFactory.setup(AStatus: IStatus;
  AContext: IExternalContext; AMetadata: IRoutineMetadata;
  AInBuilder, AOutBuilder: IMetadataBuilder);
begin

end;

{ TSqrFunction }

procedure TSqrFunction<TIn, TOut>.dispose;
begin
  Destroy;
end;

procedure TSqrFunction<TIn, TOut>.execute(AStatus: IStatus;
  AContext: IExternalContext; AInMsg, AOutMsg: Pointer);
var
  xInput: PInput;
  xOutput: POutput;
begin
  xInput := PInput(AInMsg);
  xOutput := POutput(AOutMsg);
  xOutput.resultNull := True;
  if (not xInput.n1Null) then
  begin
    xOutput.resultNull := False;
    xOutput.result := Self.sqrExec(xInput.n1);
  end;
end;

procedure TSqrFunction<TIn, TOut>.getCharSet(AStatus: IStatus;
  AContext: IExternalContext; AName: PAnsiChar; ANameSize: Cardinal);
begin
end;


{ TSqrtExecSmallint }

function TSqrExecSmallint.sqrExec(AIn: Smallint): Integer;
begin
  Result := AIn * AIn;
end;

{ TSqrExecInteger }

function TSqrExecInteger.sqrExec(AIn: Integer): Int64;
begin
  Result := AIn * AIn;
end;

{ TSqrExecInt64 }

function TSqrExecInt64.sqrExec(AIn: Int64): Int64;
begin
  Result := AIn * AIn;
end;

{ TSqrExecFloat }

function TSqrExecFloat.sqrExec(AIn: Single): Double;
begin
  Result := AIn * AIn;
end;

{ TSqrExecDouble }

function TSqrExecDouble.sqrExec(AIn: Double): Double;
begin
  Result := AIn * AIn;
end;

.................
]]>
                </programlisting>
      </para>
    </section>
  </section>

  <section xml:id="udr-factories-setup">
    <title>Метод setup</title>

    <para>Метод <methodname>setup</methodname> позволяет изменить типы входных параметров и выходных
      переменных для внешних процедур и функций или полей для триггеров. Для этого используется
      интерфейс <interfacename>IMetadataBuilder</interfacename>, который позволяет построить входные
      и выходные сообщения с заданными типами, размерностью и набором символов. Входные сообщения
      будут перестроены в формат заданный в методе <methodname>setup</methodname>, а выходные
      перестроены из формата заданного в методе <methodname>setup</methodname> в формат сообщения
      определенного в DLL процедуры, функции или триггера. Типы полей или параметров должны быть
      совместимы для преобразования.</para>

    <para>Данный метод позволяет упростить создание обобщённых для разных типов параметров процедур
      и функций путём их приведения в наиболее общий тип. Более сложный и полезный пример будет
      рассмотрен позже, а пока немного изменим уже существующий пример внешней функции
      SumArgs.</para>

    <para>Наша функция будет работать с сообщениями, которые описываются следующей структурой <programlisting language="delphi">
<![CDATA[
type
  // структура на которое будет отображено входное сообщение
  TSumArgsInMsg = record
    n1: Integer;
    n1Null: WordBool;
    n2: Integer;
    n2Null: WordBool;
    n3: Integer;
    n3Null: WordBool;
  end;

  PSumArgsInMsg = ^TSumArgsInMsg;

  // структура на которое будет отображено выходное сообщение
  TSumArgsOutMsg = record
    result: Integer;
    resultNull: WordBool;
  end;

  PSumArgsOutMsg = ^TSumArgsOutMsg;
]]>      
    </programlisting>
    </para>

    <para>Теперь создадим фабрику функций, в методе setup которой зададим формат сообщений, которые
      соответствуют выше приведённым структурам. <programlisting language="delphi">
<![CDATA[
{ TSumArgsFunctionFactory }

procedure TSumArgsFunctionFactory.dispose;
begin
  Destroy;
end;

function TSumArgsFunctionFactory.newItem(AStatus: IStatus;
  AContext: IExternalContext; AMetadata: IRoutineMetadata): IExternalFunction;
begin
  Result := TSumArgsFunction.Create();
end;

procedure TSumArgsFunctionFactory.setup(AStatus: IStatus;
  AContext: IExternalContext; AMetadata: IRoutineMetadata;
  AInBuilder, AOutBuilder: IMetadataBuilder);
begin
  // строим сообщение для входных параметров
  AInBuilder.setType(AStatus, 0, SQL_LONG + 1);
  AInBuilder.setLength(AStatus, 0, sizeof(Int32));
  AInBuilder.setType(AStatus, 1, SQL_LONG + 1);
  AInBuilder.setLength(AStatus, 1, sizeof(Int32));
  AInBuilder.setType(AStatus, 2, SQL_LONG + 1);
  AInBuilder.setLength(AStatus, 2, sizeof(Int32));
  // строим сообщение для выходных параметров
  AOutBuilder.setType(AStatus, 0, SQL_LONG + 1);
  AOutBuilder.setLength(AStatus, 0, sizeof(Int32));
end;
]]>      
    </programlisting>
    </para>

    <para>Реализация функции тривиальна <programlisting language="delphi">
<![CDATA[
procedure TSumArgsFunction.execute(AStatus: IStatus; AContext: IExternalContext;
  AInMsg, AOutMsg: Pointer);
var
  xInput: PSumArgsInMsg;
  xOutput: PSumArgsOutMsg;
begin
  // преобразовываем указатели на вход и выход к типизированным
  xInput := PSumArgsInMsg(AInMsg);
  xOutput := PSumArgsOutMsg(AOutMsg);
  // по умолчанию выходной аргемент = NULL, а потому выставляем ему nullFlag
  xOutput^.resultNull := True;
  // если один из аргументов NULL значит и резултат NULL
  // в противном случае считаем сумму аргументов
  with xInput^ do
  begin
    if not(n1Null or n2Null or n3Null) then
    begin
      xOutput^.result := n1 + n2 + n3;
      // раз есть результат, то сбрасываем NULL флаг
      xOutput^.resultNull := False;
    end;
  end;
end;
]]>  
</programlisting>
    </para>

    <para>Теперь даже если мы объявим функции следующим образом, она всё равно сохранит свою
      работоспособность, поскольку входные и выходные сообщения будут преобразованы к тому формату.
      что мы задали в методе setup. <programlisting language="sql">
<![CDATA[
create or alter function FN_SUM_ARGS (
    N1 varchar(15),
    N2 varchar(15),
    N3 varchar(15))
returns varchar(15)
EXTERNAL NAME 'MyUdrSetup!sum_args'
ENGINE UDR;
]]>      
    </programlisting>
    </para>
    <para>Вы можете проверить вышеприведённое утверждение выполнив следующий запрос <programlisting language="sql">
<![CDATA[
select FN_SUM_ARGS('15', '21', '35') from rdb$database
]]>
    </programlisting>
    </para>
  </section>

  <section xml:id="udr-factories-generics">
    <title>Обобщённые фабрики</title>

    <para>В процессе разработки UDR необходимо под каждую внешнюю процедуру, функцию или триггер
      писать свою фабрику создающую экземпляр это UDR. Эту задачу можно упростить написав обобщённые
      фабрики с помощью так называемых дженериков. Они доступны начиная с Delphi 2009, в Free Pascal
      начиная с версии FPC 2.2.</para>

    <note>
      <para>В Free Pascal синтаксис создания обобщённых типов отличается от Delphi. Начиная с версии
        FPC 2.6.0 декларируется совместимый с Delphi синтаксис.</para>
    </note>

    <para>Рассмотрим два основных случая для которых будут написаны обобщённые фабрики: <itemizedlist>
        <listitem>
          <para>экземплярам внешних процедур, функций и триггеров не требуются какие либо сведения о
            метаданных, не нужны специальные действия в логике создания экземпляров UDR, для работы
            с сообщениями используются фиксированные структуры;</para>
        </listitem>
        <listitem>
          <para>экземплярам внешних процедур, функций и триггеров требуются сведения о метаданных,
            не нужны специальные действия в логике создания экземпляров UDR, для работы с
            сообщениями используются экземпляры интерфейсов
              <interfacename>IMessageMetadata</interfacename>. </para>
        </listitem>
      </itemizedlist></para>

    <para>В первом случае достаточно просто создавать нужный экземпляр класса в методе newItem без
      дополнительных действий. для этого воспользуемся ограничением конструктора в классах потомках
      классов <classname>IUdrFunctionFactoryImpl</classname>,
        <classname>IUdrProcedureFactoryImpl</classname>,
        <classname>IUdrTriggerFactoryImpl</classname>. Объявления таких фабрик выглядит следующим
      образом: <programlisting language="delphi">
<![CDATA[
unit UdrFactories;

{$IFDEF FPC}
{$MODE DELPHI}{$H+}
{$ENDIF}

interface

uses SysUtils, Firebird;

type

  // Простая фабрика внешних функций
  TFunctionSimpleFactory<T: IExternalFunctionImpl, constructor> = class
    (IUdrFunctionFactoryImpl)
    procedure dispose(); override;

    procedure setup(AStatus: IStatus; AContext: IExternalContext;
      AMetadata: IRoutineMetadata; AInBuilder: IMetadataBuilder;
      AOutBuilder: IMetadataBuilder); override;

    function newItem(AStatus: IStatus; AContext: IExternalContext;
      AMetadata: IRoutineMetadata): IExternalFunction; override;
  end;
  
  // Простая фабрика внешних процедур
  TProcedureSimpleFactory<T: IExternalProcedureImpl, constructor> = class
    (IUdrProcedureFactoryImpl)
    procedure dispose(); override;

    procedure setup(AStatus: IStatus; AContext: IExternalContext;
      AMetadata: IRoutineMetadata; AInBuilder: IMetadataBuilder;
      AOutBuilder: IMetadataBuilder); override;

    function newItem(AStatus: IStatus; AContext: IExternalContext;
      AMetadata: IRoutineMetadata): IExternalProcedure; override;
  end;

  // Простая фабрика внешних триггеров
  TTriggerSimpleFactory<T: IExternalTriggerImpl, constructor> = class
    (IUdrTriggerFactoryImpl)
    procedure dispose(); override;

    procedure setup(AStatus: IStatus; AContext: IExternalContext;
      AMetadata: IRoutineMetadata; AFieldsBuilder: IMetadataBuilder); override;

    function newItem(AStatus: IStatus; AContext: IExternalContext;
      AMetadata: IRoutineMetadata): IExternalTrigger; override;
  end;
]]>        
      </programlisting>
    </para>
    <para>В секции реализации тело метода <methodname>setup</methodname> можно оставить пустым, в
      них ничего не делается, в теле метода <methodname>dispose</methodname> просто вызвать
      деструктор. А в теле метода <methodname>newItem</methodname> необходимо просто вызвать
      конструктор по умолчанию для подстановочного типа <classname>T</classname>. <programlisting language="delphi">
<![CDATA[
implementation

{ TProcedureSimpleFactory<T> }

procedure TProcedureSimpleFactory<T>.dispose;
begin
  Destroy;
end;

function TProcedureSimpleFactory<T>.newItem(AStatus: IStatus;
  AContext: IExternalContext; AMetadata: IRoutineMetadata): IExternalProcedure;
begin
  Result := T.Create;
end;

procedure TProcedureSimpleFactory<T>.setup(AStatus: IStatus;
  AContext: IExternalContext; AMetadata: IRoutineMetadata;
  AInBuilder, AOutBuilder: IMetadataBuilder);
begin

end;


{ TFunctionFactory<T> }

procedure TFunctionSimpleFactory<T>.dispose;
begin
  Destroy;
end;

function TFunctionSimpleFactory<T>.newItem(AStatus: IStatus;
  AContext: IExternalContext; AMetadata: IRoutineMetadata): IExternalFunction;
begin
  Result := T.Create;
end;

procedure TFunctionSimpleFactory<T>.setup(AStatus: IStatus;
  AContext: IExternalContext; AMetadata: IRoutineMetadata;
  AInBuilder, AOutBuilder: IMetadataBuilder);
begin

end;

{ TTriggerSimpleFactory<T> }

procedure TTriggerSimpleFactory<T>.dispose;
begin
  Destroy;
end;

function TTriggerSimpleFactory<T>.newItem(AStatus: IStatus;
  AContext: IExternalContext; AMetadata: IRoutineMetadata): IExternalTrigger;
begin
  Result := T.Create;
end;

procedure TTriggerSimpleFactory<T>.setup(AStatus: IStatus;
  AContext: IExternalContext; AMetadata: IRoutineMetadata;
  AFieldsBuilder: IMetadataBuilder);
begin

end;
]]>        
      </programlisting>
    </para>
    <para>Теперь для случая 1 можно не писать фабрики под каждую процедуру, функцию или триггер.
      Вместо этого регистрировать их с помощью обобщённых фабрик следующим образом: <programlisting language="delphi">
<![CDATA[
function firebird_udr_plugin(AStatus: IStatus; AUnloadFlagLocal: BooleanPtr;
  AUdrPlugin: IUdrPlugin): BooleanPtr; cdecl;
begin
  // регистрируем нашу функцию
  AUdrPlugin.registerFunction(AStatus, 'sum_args', 
    TFunctionSimpleFactory<TSumArgsFunction>.Create());  
  // регистрируем нашу процедуру
  AUdrPlugin.registerProcedure(AStatus, 'gen_rows', 
    TProcedureSimpleFactory<TGenRowsProcedure>.Create());
  // регистрируем наш триггер
  AUdrPlugin.registerTrigger(AStatus, 'test_trigger',
    TTriggerSimpleFactory<TMyTrigger>.Create());

  theirUnloadFlag := AUnloadFlagLocal;
  Result := @myUnloadFlag;
end;
]]>        
      </programlisting>Второй случай более сложный. По умолчанию сведения о метаданных
      не передаются в экземпляры процедур, функций и триггеров. Однако метаданных передаются в
      качестве параметра в методе <methodname>newItem</methodname> фабрик. Метаданные UDR имеют тип
        <interfacename>IRoutineMetadata</interfacename>, жизненный цикл которого контролируется
      самим движком Firebird, поэтому его можно смело передавать в экземпляры UDR. Из него можно
      получить экземпляры интерфейсов для входного и выходного сообщения, метаданные и тип триггера,
      имя UDR, пакета, точки входа и тело UDR. Сами классы для реализаций внешних процедур, функций
      и триггеров не имеют полей для хранения метаданных, поэтому нам придётся сделать своих
      наследников. <programlisting language="delphi">
<![CDATA[
unit UdrFactories;

{$IFDEF FPC}
{$MODE DELPHI}{$H+}
{$ENDIF}

interface

uses SysUtils, Firebird;

type
...

  // Внешняя функция с метаданными
  TExternalFunction = class(IExternalFunctionImpl)
    Metadata: IRoutineMetadata;
  end;
  
  // Внешняя процедура с метаданными
  TExternalProcedure = class(IExternalProcedureImpl)
    Metadata: IRoutineMetadata;
  end;

  // Внешний триггер с метаданными
  TExternalTrigger = class(IExternalTriggerImpl)
    Metadata: IRoutineMetadata;
  end;
]]>        
      </programlisting>
    </para>
    <para>В этом случае ваши собственные хранимые процедуры, функции и триггеры должны быть
      унаследованы от новых классов с метаданными.</para>
    <para>Теперь объявим фабрики которые будут создавать UDR и инициализировать метаданные. <programlisting language="delphi">
<![CDATA[
unit UdrFactories;

{$IFDEF FPC}
{$MODE DELPHI}{$H+}
{$ENDIF}

interface

uses SysUtils, Firebird;

type
...

  // Фабрика внешних функций с метаданными
  TFunctionFactory<T: TExternalFunction, constructor> = class
    (IUdrFunctionFactoryImpl)
    procedure dispose(); override;

    procedure setup(AStatus: IStatus; AContext: IExternalContext;
      AMetadata: IRoutineMetadata; AInBuilder: IMetadataBuilder;
      AOutBuilder: IMetadataBuilder); override;

    function newItem(AStatus: IStatus; AContext: IExternalContext;
      AMetadata: IRoutineMetadata): IExternalFunction; override;
  end;
  
  // Фабрика внешних процедур с метаданными
  TProcedureFactory<T: TExternalProcedure, constructor> = class
    (IUdrProcedureFactoryImpl)
    procedure dispose(); override;

    procedure setup(AStatus: IStatus; AContext: IExternalContext;
      AMetadata: IRoutineMetadata; AInBuilder: IMetadataBuilder;
      AOutBuilder: IMetadataBuilder); override;

    function newItem(AStatus: IStatus; AContext: IExternalContext;
      AMetadata: IRoutineMetadata): IExternalProcedure; override;
  end;

  // Фабрика внешних триггеров с метаданными
  TTriggerFactory<T: TExternalTrigger, constructor> = class
    (IUdrTriggerFactoryImpl)
    procedure dispose(); override;

    procedure setup(AStatus: IStatus; AContext: IExternalContext;
      AMetadata: IRoutineMetadata; AFieldsBuilder: IMetadataBuilder); override;

    function newItem(AStatus: IStatus; AContext: IExternalContext;
      AMetadata: IRoutineMetadata): IExternalTrigger; override;
  end;
]]>        
      </programlisting>
    </para>
    <para>Реализация метода <methodname>newItem</methodname> тривиальна и похожа на первый случай,
      за исключением того, что необходимо инициализировать поле с метаданными. <programlisting language="delphi">
<![CDATA[
implementation
...

{ TFunctionFactory<T> }

procedure TFunctionFactory<T>.dispose;
begin
  Destroy;
end;

function TFunctionFactory<T>.newItem(AStatus: IStatus;
  AContext: IExternalContext; AMetadata: IRoutineMetadata): IExternalFunction;
begin
  Result := T.Create;
  (Result as T).Metadata := AMetadata;
end;

procedure TFunctionFactory<T>.setup(AStatus: IStatus;
  AContext: IExternalContext; AMetadata: IRoutineMetadata;
  AInBuilder, AOutBuilder: IMetadataBuilder);
begin

end;

{ TProcedureFactory<T> }

procedure TProcedureFactory<T>.dispose;
begin
  Destroy;
end;

function TProcedureFactory<T>.newItem(AStatus: IStatus;
  AContext: IExternalContext; AMetadata: IRoutineMetadata): IExternalProcedure;
begin
  Result := T.Create;
  (Result as T).Metadata := AMetadata;
end;

procedure TProcedureFactory<T>.setup(AStatus: IStatus;
  AContext: IExternalContext; AMetadata: IRoutineMetadata;
  AInBuilder, AOutBuilder: IMetadataBuilder);
begin

end;

{ TTriggerFactory<T> }

procedure TTriggerFactory<T>.dispose;
begin
  Destroy;
end;

function TTriggerFactory<T>.newItem(AStatus: IStatus;
  AContext: IExternalContext; AMetadata: IRoutineMetadata): IExternalTrigger;
begin
  Result := T.Create;
  (Result as T).Metadata := AMetadata;
end;

procedure TTriggerFactory<T>.setup(AStatus: IStatus; AContext: IExternalContext;
  AMetadata: IRoutineMetadata; AFieldsBuilder: IMetadataBuilder);
begin

end;
]]>        
      </programlisting>
    </para>

    <para>Готовый модуль с обобщёнными фабриками можно скачать по адресу <link
        xmlns:xlink="http://www.w3.org/1999/xlink"
        xlink:href="https://github.com/sim1984/udr-book/blob/master/examples/Common/UdrFactories.pas"
        >https://github.com/sim1984/udr-book/blob/master/examples/Common/UdrFactories.pas</link>.</para>
  </section>
</chapter>
